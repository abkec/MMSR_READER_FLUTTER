import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/material.dart' as prefix0;
import 'package:flutter/services.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:intl/intl.dart';
import 'package:reader_mmsr/Model/ChildrenModel.dart';
import 'package:reader_mmsr/Model/HistoryModel.dart';
import 'package:reader_mmsr/Model/OngoingModel.dart';
import 'package:reader_mmsr/localdatabase/Database.dart';
import 'package:reader_mmsr/style/theme.dart' as Theme;
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';
import 'package:reader_mmsr/ui/book_list.dart';
import 'package:http/http.dart' as http;
import '../utils/transparent_image.dart';
import 'package:super_tooltip/super_tooltip.dart';

//This is the page to let user read story content

class LoadContent extends StatefulWidget {
  String storyID, storyLanguage, storyTitle;
  Children childData;
  String childrenID;
  LoadContent(
      {Key key,
      this.storyID,
      this.childData,
      this.childrenID,
      this.storyTitle,
      this.storyLanguage})
      : super(key: key);
  @override
  _LoadContentState createState() => new _LoadContentState();
}

class _LoadContentState extends State<LoadContent> {
  String url = 'http://i2hub.tarc.edu.my:8887/mmsr/';
  var db = DBHelper();
  List pageText, languageData, pageLanguage, onGoing;
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return new Scaffold(
      body: new FutureBuilder<List>(
        future: db.getText(
            widget.storyID,
            widget
                .childrenID), //start by "db." means get data from local database. and the parameters are object of the _LoadContentState
        //object of _LoadContentState are the data passed by previous page
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            pageText = snapshot.data;
            return new FutureBuilder<List>(
                future: db.getLanguage(widget.childrenID),
                builder: (context, snapshot2) {
                  if (snapshot2.hasData) {
                    languageData = snapshot2.data;
                    return new FutureBuilder<List>(
                      future:
                          db.getTextDistinct(widget.storyID, widget.childrenID),
                      builder: (context, snapshot3) {
                        if (snapshot3.hasData) {
                          pageLanguage = snapshot3.data;
                          return new FutureBuilder<List>(
                            future: db.getOngoing(
                                widget.childrenID, widget.storyID),
                            builder: (context, snapshot4) {
                              if (snapshot4.hasData) {
                                onGoing = snapshot4.data;

                                return new FutureBuilder<List>(
                                    future: db.getStats(widget.childrenID),
                                    builder: (context, snapshot5) {
                                      if (snapshot5.hasData) {
                                        return new PageContent(
                                          pageText: pageText,
                                          stats: snapshot5.data,
                                          childData: widget.childData,
                                          childrenID: widget.childrenID,
                                          languageData: languageData,
                                          pageLanguage: pageLanguage,
                                          storyID: widget.storyID,
                                          storyLanguage: widget.storyLanguage,
                                          storyTitle: widget.storyTitle,
                                          onGoing:
                                              onGoing, //passing data to next widget
                                        );
                                      } else {
                                        return new Center(
                                          child: new Column(
                                            children: <Widget>[
                                              new Padding(
                                                  padding:
                                                      new EdgeInsets.all(50.0)),
                                              new CircularProgressIndicator(),
                                            ],
                                          ),
                                        );
                                      }
                                    });
                              }
                              return new Center(
                                child: new Column(
                                  children: <Widget>[
                                    new Padding(
                                        padding: new EdgeInsets.all(50.0)),
                                    new CircularProgressIndicator(),
                                  ],
                                ),
                              );
                            },
                          );
                        }

                        return new Center(
                          child: new Column(
                            children: <Widget>[
                              new Padding(padding: new EdgeInsets.all(50.0)),
                              new CircularProgressIndicator(),
                            ],
                          ),
                        );
                      },
                    );
                  } else {
                    return new Center(
                      child: new Column(
                        children: <Widget>[
                          new Padding(padding: new EdgeInsets.all(50.0)),
                          new CircularProgressIndicator(),
                        ],
                      ),
                    );
                  }
                });
          }

          return new Center(child: SpinKitThreeBounce(color: Colors.blue));
        },
      ),
    );
  }
}

class PageContent extends StatefulWidget {
  List pageText,
      languageData,
      pageLanguage,
      storyData,
      onGoing,
      pageImage,
      stats;
  Children childData;
  String childrenID, storyID, storyTitle, storyLanguage;
  int index;
  @override
  PageContent(
      {Key key,
      this.stats,
      this.childrenID,
      this.childData,
      this.storyLanguage,
      this.storyTitle,
      this.pageText,
      this.languageData,
      this.pageLanguage,
      this.index,
      this.storyID,
      this.onGoing,
      this.pageImage})
      : super(key: key);
  _PageContent_State createState() => new _PageContent_State();
}

// ignore: camel_case_types
class _PageContent_State extends State<PageContent>
    with SingleTickerProviderStateMixin {
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
  PageController contentController;
  PageController languageController;
  FlutterTts flutterTts = new FlutterTts();
  List<String> languageList = [];
  List pageList = [];
  int saveNumber = 0;
  int initialLanguage = 0;
  DateTime start_time = DateTime.now();
  int OngoingDuration;

  // DateTime start_time ;
  int currentPage;
  int currentLanguage = 0;
  var db = DBHelper();
  var pickLanguage = [];
  int languageRate;
  String url = 'http://i2hub.tarc.edu.my:8887/mmsr/';
  double rate = 0;
  String emptyImage =
      "iVBORw0KGgoAAAANSUhEUgAAA7UAAAWLEAYAAAC8aU2RAAAACXBIWXMAABcSAAAXEgFnn9JSAAABNmlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjarY6xSsNQFEDPi6LiUCsEcXB4kygotupgxqQtRRCs1SHJ1qShSmkSXl7VfoSjWwcXd7/AyVFwUPwC/0Bx6uAQIYODCJ7p3MPlcsGo2HWnYZRhEGvVbjrS9Xw5+8QMUwDQCbPUbrUOAOIkjvjB5ysC4HnTrjsN/sZ8mCoNTIDtbpSFICpA/0KnGsQYMIN+qkHcAaY6addAPAClXu4vQCnI/Q0oKdfzQXwAZs/1fDDmADPIfQUwdXSpAWpJOlJnvVMtq5ZlSbubBJE8HmU6GmRyPw4TlSaqo6MukP8HwGK+2G46cq1qWXvr/DOu58vc3o8QgFh6LFpBOFTn3yqMnd/n4sZ4GQ5vYXpStN0ruNmAheuirVahvAX34y/Axk/96FpPYgAAACBjSFJNAAB6JQAAgIMAAPn/AACA6AAAUggAARVYAAA6lwAAF2/XWh+QAACmKUlEQVR42uzdf2yWZbov+msZKTtQmlqbWlpEioiVgXJExqU9BB2WjohsFyGEM8czMY0xEzMhxBBiiCH8QcikMYQYQibEGNN45kzchBDGzTCMM+MoYVcWg7itDKsySBGhlKbWphQSqpl1/sCHMqgjKNzvr8/nH0ZkvN9e9/O+Lc/3ua77X/7rSwEAAAAAAABAEjcoAQAAAAAAAEBagloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQmKAWAAAAAAAAIDFBLQAAAAAAAEBigloAAAAAAACAxAS1AAAAAAAAAIkJagEAAAAAAAASE9QCAAAAAAAAJCaoBQAAAAAAAEhMUAsAAAAAAACQ2I1KAAAAAIXvXO3ZQ2cPRQx1nN14dmPE54uGpw9Pj+h/vr+8v/zar1f1i6qhqqGIUdvLDpYdjChvGrt87PKIMT1jp42dZj8AAAC+zb/815eUAgAAAPLPQOtA40BjxOnantae1oj+of61/WsjhtacmXpmasTJDSfbT7bn3+uuX1HfXN8cUb523OFxhyOqyqvWVK2JuKWndlXtqojKVZWdlZ32FwAAKF2CWgAAuAbe3bZ/xf4VEf1Pf9r9aXe6dWd23l15d2VETU3N5prN9sH18vUe7n/ktUdeU/d8lXXCnm453Xm6M+J478dTPp4S0V3Zvbh7ccT5pvPD54eL7+se3TG6bHRZxKTJDRUNFRG1J2pX166OmDDh1vZb2yNGLRu1ftR61wcAAFC8jD4GAIBrIAvcUne2nZl1pvtMd8R/X/Xv5f9eLthwvZDPPt/0+crPV0acOPFJ8yfNEX9tOlh5sDKir7Wvpa/lkj/YWBr1yALoD6Ozr7Mv4sPGzmc7nx359w1PNTzZ8GTExJrbjtx2JKKhdfLiyYtdRwAAQPEQ1AIAQAEbXDdYN1gX0VHx/t/f/3vEPTE7ZisL5IWsU/b91e//9P2fRhw72jXYNRhxvun8lvNbImJYjf6ZrrldC7sWRnRFV3RFxN4V7zz3znMR0+fNWD1jdcTtT99+7+33OhMXAAAoXIJaAAAoAh8Mdmzt2Bpxa+/EcxPPGYUMuXB5MPth64VO0Yua1Oj7yDpw3+3bv2b/moh3W/fH/oi4c1NjdWN1xMx1M38181eCWwAAoHAIagEAoIjsmbX75d0vG4UMKXxrMEsSH5Z/OTq5tXN+5/yIGdualjQtiWjqnnnDzBt8DgIAAPnrBiUAAIDicXEUct2FUcjAtffBjo62jraI3zyx/fHtj48EheTJ/nw5YWDr0S3bt2yP+LCtc3vndnUBAADyj6AWAACKUBZUnGw+senEJvWA72OgdaBxoDFix69ff/P1N0dG72ajeMlP2f68E+3L25eP7F+2nwAAALkmqAUAgCK2+763X3z7xYjPN32+8vOV6gFXI+vE3F677dy2cxF9w30tfS3qUqiy/cv2U6ctAACQa4JaAAAoYllHWfuBPU/ueVI94J/JHmh4+6k/d/y5Y6QTk+KU7W+23x5oAQAAUhPUAgBACeia27Wwa6FRyPB1ztWePXT2UMTvq3634HcLRt4vlNbn4/9s/c2Lv3nRaGQAACCdG5UAAABKRzYKecmmpceWHosYtWzU+lHr1YXSlAVyv3vit1/89ouI88PFfeZsdVl1W3VbxOhlo18a/dJ3/++c3HCy/WR78dVncN1g3WBdxO86LlwPj7Y+1vhYY0TlqsrOyk7vFwAA4NoT1AIAQAm5OAp594VRyA/Ej+JHykKJuRjQ9n4Z0DYVdkBbv6K+ub45ovbV8fPHz4+45d7avbV7I8qbxi4fuzxiTM/YaWOnXfJ/eCLmxbzvv242KvizpZ8NfTYU8dnO/vn98yN6dp+afGpyRHdl9+LuxYVX3+z1bo9tw9uGIx5Y9eC2B7dFNLROXjx5sfcPAABw7QhqAQCgBGWjPqc03/HcHc9F1LdPWDZhmbpQ3Ao1oB3dMbpsdFnEpMkNFQ0VERN/PfGpiU9d8r5t+cr/pSVaIqLn+r6urCO/JmqiJiJqWi78emdLY3w5OfhIHIno7e19pveZiE/2HB9zfEzE4T0fvv7h64VT/7cb33r2rWcjYtWFfxbYAgAA14ozagEAoIRlo5CzzjgoRoUW0Fasruiu6I54oPPBFx98MWLJ5KWLli6KuH9Z84HmA4X3YEVNTc3mms0R9yyevWH2hoj/e8P/c+T/OTLy9WUdwfkuC2y7Vh3ddnSb9xUAAPD9CWoBAKCEXRyFfODCKGQoJoUS0F4ezC4+seSLJV+MdG4W61nS2df3cP8jrz3yWsSCBQsXLFyQ/8Ht3uF3nnvnuZHrCwAA4LsS1AIAABdHIZ9sPrHpxCb1oLBlHeJ7Ju7+5e5f5l9Am40yvj+aNzZv/GowW6qyztssuM2C66xe+SK7nrIHAM7Vnj109pD3HQAAcPUEtQAAwEVGIVMM3lrz5ok3T0T0Dfe19LXkz+tq2N2wo2HHyCjjO1saFzUusl/fWK8vg+usXln98kUW2L654U89f+rxuQkAAFw9QS0AAHCRUcgUsg92dLR1tEWc3HCy/WR77l9P1gmadYY+8MqPmn7UVLyjjK+XrF5Z/fKt0zZ7IKCj7v2/v/93+wUAAFw5QS0AAPAVRiFTSHp7e5/pfSbi3b79a/avyf3rqS6rbqtui3i05rEbH7vRSONrLatnVt98CWw/GOzY2rHV5yYAAHDlBLUAAMA3MgqZfHbxLNpZu1/e/XLuX08W0D7S/+jOR3dGVK6q7KzstE/XS1bfbDRyVn+fmwAAQKEQ1AIAAN/IKGTyWTZqdnDdYN1gXe5ex51DjdWN1RELn3h83uPzjDZOLat3FpDnOrDNPjf3x1/e/Mub9gcAAPhmgloAAOBbGYVMPhloHWgcaBwZNZsrWUB7/7LmA80H7Euu5Vtg+2F5Z19n38hobgAAgMsJagEAgCtmpCf54C8v/Mf/8R//R+7Wr19R31zfLKDNV1lgO+f43J/P/Xnuz7Dd98e9S/cutS8AAMBXCWoBAKAAVayu6K7oTr+uUcjkUtaZeHLDyfaT7bl73z24dt6EeRPsR77LzrD9t1UPP/TwQ7l7HX3DfS19LRFdq45uO7rNvgAAACMEtQAAUIDmHJj79Nync7e+UcjkwvuN7w28N5C79ecte2jKQ1OcQVtoampqNtdsjrinevba2Wtz9zre+9WBpQd01gIAAJcQ1AIAQAHKgocZFU1Lmpbk7nUYhUwKue6kzQK+rEOTwjRjYVNLU0vuzq4dXDdYN1insxYAABghqAUAgALW1D3zhpk3GIVMcctVJ232vsoCPopDdnZtruisBQAAMoJaAAAoYNkIVqOQKUYDrQONA42566TN9fuK6yPrjL5zqLG6sTr9+llnbdYpDgAAlC5BLQAAFAGjkClG/1l+aMyhMenXrV9R31zfPPK+ojjNjh/O++G8iNEdo8tGl+Xg+l7115//9ef2AQAASpmgFgAAiohRyBSDLOg/drRrsGsw/fozO++uvLvSPhS7bCLB9HkzVs9YnX79bBLBudqzh84esh8AAFCKBLUAAFBEsuBh3rKHpjw0JXevwyhkvo8TJz5p/qR5JPhPpbqsuq26TSdtqWk8dtfBuw7mrrP2k9ZPDn9y2D4AAEApEtQCAEARys5gvKd69trZa3P3OoxC5rs43vvxlI9z8KDBDzqmD0wfUP9Skz3gMmlyQ0VDRfr1/1Z2uOJwhX0AAIBSJKgFAIAiNmNhU0tTy0inYGpGIXM1skA/68hObcKEW9tvbbcPpequoWnnpp1Lv27fcF9LX4sRyAAAUIoEtQAAUALmHJ/787k/z936RiFzJXp/fXrS6Unp123Y3bCjYcdIZyWlKZtEkKsHW4xABgCA0iOoBQCAEmAUMoXg+BPHXzn+Svp1J9bcduS2I+rPBXcMTx2cOpiD63/Fx699/Jr6AwBAKRHUAgBACTEKmXx2qrW7o7sj/bpGHnOpW1fdOvXWqenXPbnhZPtJ1yEAAJQUQS0AAJQgo5DJJ9nZnIPrBusG69KtW7+ivrm+2chj/tGYnrHTxk7L3QMtvb29z/Q+Yx8AAKAUCGoBAKAEGYVMPvls8mdvfvZm+nVrXx0/f/x89efr3VYx6fik4+nXPb2v576e+9QfAABKgaAWAABKmFHI5IP+5/vL+8vTr3vLvbV7a/eqP/l1ffQ8eWrXqV3qDwAApUBQCwAA5M0o5K5VR7cd3WY/Sk2ugqmbttxUflO5+vP1ampqNtdsTr9uX0vf/r796g8AAKVAUAsAAOTNKOS9w+88985zI2eWUhpSB1MVqyu6K7qdTcuVyc4yTiWbNOBzEAAAip+gFgAAuChfRiH/r+E9a/estR/FLjubONv3VMadG7dk3BL158pUvXxz3c116dcd6ji78exG9QcAgGImqAUAAL4i16OQT2442X6yPeLDts7tndvtR7H6bOlnQ58NpV+39tXx88fPV3+uTPlg+dzyuenXPb2v576e+9QfAACKmaAWAAD4inwZhXyg492V7640ArRYnd0w9OOhH6dft6yvrLKsUv25MjctqNpVlYMzlIeHhzuGO9QfAACKmaAWAAD4RkYhcz0NzRkaHBpMv26ugjcK001bbiq/qTz9uv1Pf9r9abf6AwBAMRPUAgAA38ooZK4HHYMUglHLRq0ftV4dAACAa09QCwAAfCujkLkectUxWFNTs7lms/pzdSpWV3RXJLxeswdUAACA4iWoBQAArphRyECpGndu3JJxS9QBAAC4dgS1AADAVTMKmWvh/KbzPzv/M3UAAACgNAlqAQCAq2YUMtdC33BfS19LuvXqV9Q31zerO99N2aKy58ueT7+uzzcAAChegloAAOA7MwoZKBVVi28+cPOB9OsOdZzdeHaj+gMAQDES1AIAAN+bUcgAAAAAV0dQCwAAfG9GIQMAAABcHUEtAABwzRiFDAAAAHBlBLUAAMA1ZxQyAAAAwD8nqAUAAK45o5ABAAAA/jlBLQAAcN0YhQwUi+Hh4Y7hDnUAAACuHUEtAABw3RmFDBS6/qc/7f60O/26NTU1m2s2qz8AABQjQS0AAHDdGYUMAAAA8I8EtQAAQDJGIXOp1NdBX0vf/r796g4AAEB+ENQCAADJGYVMRMToZaNfGv1SuvWyoB6+i9RBf8Xqiu6KbnUHAIBiJqgFAACSMwqZiIiyRWXPlz2vDhSG1EH/uHPjloxbou4AAFDMBLUAAEDOGIVc2qoW33zg5gPp1+3t7X2m9xn158oMtA40DjSmX9eDDAAAUPwEtQAAQM5lo5BHd4wuG12Wfn2jkHOjrK+ssqwy/bqfLxqePjxd/bkyw08NPzj8YPp1c/UgAwAAkI6gFgAAyLlsFPKspnvW37M+d6/DKOS0blpQtatqV/p1+5/vL+8vV3+uzOl9Pff13Jd+3fI95RXlFeoPAADFTFALAADkjTtbGhc1LoqoX1HfXN+cfn2jkNO6actN5TflIDDt3/bprE9nqT9XZujY0MahjenXHbui/I3yN9QfAACKmaAWAADIO/9n2Zw1c9YYhVzsRi0btX7U+oiK1RXdFd3p1v30DUEtV+5Ua3dHd0f6dWtqajbXbFZ/AAAoZoJaAAAg74zpGTtt7DSjkEvFzT9Oexbn4LrBusG6iM83fb7y85Xqz9fLro/sekmluqy6rbpN/QEAoBQIagEAgLxlFHJpqJ07/uj4o+nX7f316UmnJ6k/+XV93NxfvbLaAwQAAFASBLUAAEDeMwq5uN3SU7uqdlX6dY8/cfyV46+oP/l1fdSeqF1du1r9AQCgFAhqAQCAvGcUcnGrXFXZWdmZPojP1dmjFIZcXR+3tN3SeEuj+gMAQCkQ1AIAAAXDKOTiVjdQt61uW7r1srNHB1oHGgcEY3wpux5Sn01bsbqiu6J75MEUAACg+AlqAQCAgpMvo5A/2NHR1tFmP66ViTW3HbntSPp1P5p6ZMGRBepPbq+H2zZOWj5pufoDAEApEdQCAAAFJ19GIb/bt3/N/jU6Mq+VCRNubb+1Pf26h/d8+PqHr6s/ub0eatfXTq6drP4AAFBKBLUAAEDByvUo5Myeibt/ufuX9uP7GrVs1PpR6yMadjfsaNiRbt1spHXXqqPbjm6zD6Uq2//sekglmwxQ3z5h2YRl9gEAAEqJoBYAACh4uR6F3Dfc19LXYhTytZKrEch/bTpYebBS/UvVkZf+tuVvW9KvO2lyQ0VDhfoDAEApEtQCAAAFzyjk4tLQOnnx5MXpg/cscO/t7X2m9xn7UCqy/c7Onk7trqFp56adsw8AAFCKBLUAAEDRMAq5uEydc+fjdz6eft19f9y7dO9S9S8V7ze+N/DeQPp1K1ZXdFd0R1Suquys7LQPAABQigS1AABA0TEKuTjc9fO7nr7r6dztnzNri9vJ5hObTmzKXSftD9ZN3zp9q30AAIBSJqgFAACKjlHIxbWPDbsbdjTsSL/+3uF3nnvnuYjPN32+8vOV9qNYZPv5H8f3Prv32fTrZw+QTB66fc/te+wHAACUMkEtAABQtIxCLg53tf7glz/IQf3ON50fPj8c0X5gz5N7nrQPxaKj7v2/v//3iMF1g3WDdenXnz5vxuoZqyNGLRu1ftR6+wEAAKVMUAsAABQ9o5ALW01NzeaazbkL3Lvmdi3sWjgyKpfC1Nvb+0zvMxEfDHZs7cjByOHs86fx2F0H7zpoPwAAAEEtAABQAvJtFPKZMWe2nnE25VWb2Xl35d2VuVt/931vv/j2i0ZZF5ps1PGfWv/wxz/8MXevQyctAABwOUEtAABQMvJlFHKuRq4Wulx31majkLNR1s6uLQy/r/rdgt8tGNm/1HTSAgAA30RQCwAAlJxcj0Lm2uxfrmSjrLMAUGCbn97Z1D6rfdbIfuWKTloAAOCbCGoBAICSky+jkPl++3dP9ey1s9fm7nUIbPNTFtB+WN7Z19mXu9dRsbqiu6I7YsbCppamFvsCAAB8laAWAAAoWfkyCpnvJhslmwViuSKwzQ/5EtBm5hyY+/Tcp+0LAADwzQS1AABAyTMKuTBlo2TzJRAT2KaV1fftp/7c8eeO/AloZ1Q0LWlaMnKmMgAAwDcR1AIAACXPKOTClgViuR6FnMkC261Ht2zfsj1ioHWgcaDRPl0r52rPHjp7aCQQ75rbtbBrYe5fV3VZdVt1W0RT98wbZrrbAgAAXAF/dQAAAPiSUciFLTsLNF/273zT+eHzwxHba7ed23Yu4oMdHW0dbfbpuzrZfGLTiU0Rv3li++PbHx8JxHMt68Sfc3zuz+f+fKTTGwAA4NsIagEAAC5jFHJhe3DtvAnzJuT+7NrLvdu3f83+NRE7fv36m6+/qdP222Sds9lo4z/87I0X3nhhJADPF/eV3f/C/S9EVK6q7KzstG8AAMCVE9QCAABcxijkwpZ1NM5b9tCUh6bkX+CedYJmnbbvbGqf1T7LmbbZ1591Hmeds/ky2vhy2ajthtbJiycv9r4DAACunqAWAADgGxiFXNiyDsdHax678bEb87dD+sPyzr7OvpEzbd/dtn/F/hUjHaXF6vJg9uLX/2Xncb51zl78XBhqrG6sHhm1DQAA8F0JagEAAL6FUciFLQts5+594NkHns3f15kFkx8Mdmzt2BqxpfV/zP8f80dG/3atOrrt6LbC7bzNzpjNOoj/v/L/d8v/uyX/g9lMFtDev6z5QPMB7ysAAOD7u1EJAAAA/rmLo5DbLoxCfifal7cvV5dCU98+YdmEZRELehceXHgw4k+tf/jjH/6Y/wFhNvq3K7qi65Lfb3iq4cmGJyNq544/Ov5oxE0LqnZV7YqoqanZXLM5/evMztw9XdvT2tMa0bP71ORTkyO6K7sXdy+OOP+z/K7zNxHQAgAA14ugFgAA4Aplo5CPV3382sevRZzccLL9ZLu6FJosyHy05rHGxxojftfx2/ht5H9ge7mvBLg7L/6riTExorqsuq26LWL0stEvjX4povbV8fPHz//+6/Y8eWrXqV0R5zed/9n5n42cuRu1F//I8lgeEXML/P0uoAUAAK4zQS0AAMBVenDtvAnzJkRs7dhStqWs8AI+Lrh4hm3rhcB2T9nul3a/dEnwWOAufh0bLvzzyb5r9GDBl/+9GI72KMIHFe6P5o3NGyPuXHbhwQwAAIDrxRm1AAAAV2nUslHrR63P/zNPuTJZYPtI/6M7H90Z0bC7YUfDDnUpFdnZ0w+/9OPnfvzcSOc8AADA9SaoBQAA+I6yM08Fe8UhC+AfeOVHTT9qGumspEjfvyvqm+ubI/7914teX/T6yPsZAAAgFUEtAADA99Q8a86rc14d6cyjOGSdlYt6Fo9ZPGbkzFcKU/b+vKd69trZayMe7n/ktUdeixjTM3ba2GnqAwAApCeoBQAA+J6MQi5u2WjkhU88Pu/xeSNBn2C+MFzeOTtjYVNLU4u6AAAAuSeoBQAAuEaMQi4NWdCXBX/2O79knc8LFixcsHCBzlkAACB/3agEAAAA11Y2Crm7o7usuyzifNP54fPD6lJssuDvgfhR/Cgi7ur9wYIfLIh4v/G9gfcGIk5uONl+sl2drrcsmP1Bx/SB6QMRDa2T502eFxER82Ke+gAAAPlLUAsAAHCNXRyF3PzApAcmRfyh6Y0X3nhBXYpdTU3N5prNEQ/3PxKPRERvb+8zvc9EfLTlyL4j+yI+LO/s6+xTp+8r62C+q/UHv/zBLyNqamrm1cyLiCfUBgAAKCyCWgAAgOvk4ijkpxrmNsyN6JrbtbBrobqUiiy4rVlWEzURMbN25qGZhyI+evmjfR/ti/jbM4efPvx0xOC6wbrBOvW6XMXqiu6K7og7Nk99eerLEbc/ffu9t9/7DyOMN8dmdQIAAAqXoBYAAOA6MwqZiJGAcUY0TWuaFjHjxIWzbgdaBxoHGiM+mnpkwZEFER8vP7bx2MbSCXCzQPa2jZOWT1oecfvhKTun7IyoPFH5ReUXl/zBHtcQAABQXP7lv76kFAAAAJA/ztWePXT2UMTpltOdpzsjeib0rOtZF/FpVd/6vvURfcN9LX0t+f91ZGfI3txfvbJ6ZUTtidrVtasjbmm7pfGWxn/okAUAACgpgloAAAAoYFlH7tnXh5YNLYvof76/vL985N/3PHlq16ld137d2lfHzx8/f+Sfq35RNVQ1FDH28fJN5ZsiKldVdlZ22h8AAIBvIqgFAAAAAAAASOwGJQAAAAAAAABIS1ALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkJigFgAAAAAAACAxQS0AAAAAAABAYoJaAAAAAAAAgMQEtQAAAAAAAACJCWoBAAAAAAAAEhPUAgAAAAAAACQmqAUAAAAAAABITFALAAAAAAAAkNiNSgAAAMB30dvb+0zvM1/9/c929s/vnx8xXD08MDxw5f+9W+6t3Vu796u/X1NTs7lms3oDFKtztWcPnT0UMdRxduPZjSO/f3bD0I+HfhwxNGdocGjwyv97Vb+oGqoaihi1vexg2cGR3y9vGrt87PKIMT1jp42dpu4AQO79y399SSkAAABKWxa8nt7Xc1/PfRFDx4Y2Dm2MGFpzZuqZqREnN5xsP9me+9dZv6K+ub45onztuMPjDkeUTypfXr58JOgV7ALk1kDrQONAY8RnA/2/6P9FRP+9/Xv690T0P/1p96fdEWfGnNl6ZmvE4LrBusG63L3OitUV3RXdEePOjVsybklE7avj54+fPxL03nT0pnk3zRPsAgDXj6AWgLz27rb9K/avGPkLPddH2aKy58uej6hafPOBmw/8kz/XV1ZZVhlx04KqXVW7Rn7/pi03ld9UHjFq2aj1o9arZ7G9L6b87I6ldyyNaGidvHjyYvUvFH+o+v1Pfv+TdOv98Ll//d//+r8jKldVdlZ2qn++ym6cfzL9+KrjqyJ6njy169Su/Algr7Us0M1uvN96cGLrxFbXabF9/sCVqHr55rqb6yLuWTx7w+wN6vF9ZR2wn7R+cviTwxE9u09NPjU5oruye3H34ojzTeeHzw8Xz9ebBbrjV9U11TVFTPz1xKcmPhVR88Qtx2455u9BAMB3J6gFIK9lN/qK9QZysaouq26rbosY98dx1eOqRwJgnU6F+b64p3r22tlrI2YsbGppalH/QtHW9srEVyamW2/BgoULFi7w/s4XWSD70dQjC44siPh4+bGNxzbmvnMpX2Q33G/bOGn5pOURtx+esnPKTgFuoX7+wJXIHtx4uP+R1x55TT2u1OebPl/5+cqIo+UfzfloTsTfyg5XHK6I6Bvua+nzc+FFDbsbdjTsiJjSecfuO3ZH1LdPWDZhmboAAN/OGbUAwDWX3bjpm9sXfRHR1dcVXREROy/+kYkxceSG2cQNt/3ktp9E3Lrq1qm3TjVaDOBKZTfQT5z4pPmT5oi/Nh2sPFgZ0Vfbd67vXEQMxtbYGhHroi4EtBdlgfUHgx1bO7ZGfFDbER0RUf3r6jer34z4Qcf0gekDJgkApScbgf/RliP7juyL+LC8s6+zLyIitsSWiBhWo6/TNbdrYdfCiK65F/7eM3rF6BdHvxgxfd6M1TNWR9z+9O333n6vv+cAAF8lqAUAcibrCD0ZF359p/XC79dXXQhwjdwF+EdZMNs56T+n/+f0iINHP9j+wfaI803nt5x3A/17yx40ervxrXgrIvaueOe5d54budHeeOyug3cdNOISKB5ZMPt+43sD7w1cMrGlXG2+j2z087t9+9fsXxPxbuv+2B8Rd25qrG6sjpi5buavZv5KcAsACGoBgDx0eYD73oQDSw8sjbj7p7O2zNoiuAVKz4dtnds7t0ccOPru9ne3R5wv/zKYbVKb6+nyG+0Hj35Q9kFZxKy2e+bcMyfizpbGRY2L1AkoHN8YzDq3N8338y87lD9s7ZzfOV9wCwBE3KAEAEC+y0ZUvt341rNvPRuxbcLWG7feOHKjCaDYZJ9v2efdO9G+vH35SHBIbmT1z/bD9yMg352rPXvo7KGIt5/6c8efOyJ27tyxc8fOSwJacioLbn/zxPbHtz8e8cGOjraOtpEJGgBA8dNRCwAUnCy4zW40zahoWtG0IqKpe+YNM28wkhIoPNkN2f3xlzf/8uYlZwI6W7agvh817G7oaOiIaJ4159U5r/p+BOTOxUkMT7y78t2VHvTJd5dPcPhb6+Huw90Rc5bOHZo7FFFTU7O5ZrM6AUAx0lELABS8DwY7tnZsjfh91e8W/G6BJ9CBwpF1Yv7P1t+8+JsXLwloKUhdc7sWdi2M2Hp0y/Yt2yNONp/YdGKTugDXX/bzb9Y5axJDYbv8QaB3t+1fsX+Fv+cAQDES1AIARaNvuK+lr2XkBvlA60DjQKO6APknG22Y3YDNbshSHLJg5A8/e+OFN14YucEOcK1lP+9mD/xkD4xQZD83XPZgqr/nAEDxENQCAEUnu0H+u97ffvHbL0bO5gLIlawD5p1N7bPaZ42MNqQ0ZDfYd/z69Tdff1NHFPD9da06uu3otojttdvObTvngZ9SkT2Ymv09x+QGACh8zqgFAIpWFti+OftPPX/qiXhk06OvPPqKMwOBdLJALuuA6Rvu29K3pXS+/uqy6rbqtojRy0a/NPqlb/5zfS19+/v2F/+IzksmP5RtKYt4tPWxHY/tiKhcVdlZ2en9Any7bCLDu42l9cBPxeqK7oruiHHnxi0Zt+Sb/9yZMWe2ntla/MH1xckNTRcmNzyw6sG6B+siGlonL5682PsEAAqJoBYAKHrZjfH2A3t27NkR8UD8KH6kLMB19DUBbUtfS+F+PaM7RpeNLouoG6jbVrctomrxzQduPhBxy721e2v3RpS9UvZW2Vv/JHB8IubFvKuv32dLPxv6bCjis5398/vnR/QP9a/tXxvxaVXf+r71hVvXi5MfOn4bv42IR1sfa3ysUWALfLNsIkOxnGVev6K+ub45ourlm+turouo2lc1p2pOxNgV5W+UvxFRU1OzuWbzJf+H7/lZn50J//mi4enD0yP6n+8v7y+P6Hny1K5TuyJObjjZfrK9cOv5duNbz771bETPpp51Pesi7l/WfKD5gPcNABQCQS0AUDKyM7tq28ZvHL8x4s6WxkWNi9QFuHYKPaDNOmBvq5h0fNLxiFsPTmyd2BpRueErAWJTNEVEREu0RMSqa/s6sskHNVETNRFR03Lh14hYFJd8bp+rPbvr7K6I0y2nO093Rhzv/XjKx1MK54xGgS3wbQo1oM0e8Jk0uaGioSJi4q8nPjXxqYj69gnLJiyLrwaviy/5X9ehI/Ri8PtlGFsfE2JCRMzob2ppuuS1ZKOEjz9x/JXjr0QcO9o12DVYOBMfLl4nm2JWzBLYAkAhENQCwCXuqZ69dvbaiBkL//Ev7KVioHWgcaAxYvip4QeHH/zqv886moarhweGByL6t30669NZEWceOtN3pq9wAokDHe+ufHdlxK21t069dWrEmJ6x08ZOc/0D312hBbSX30C/a2jauWnnIipXVc6rvLTzdeGXQWyeyj6/G2LytMkXfo3JEfHD2nt33bsr4qOXP9r30b6Ig29+sO6Ddfl7o73YAtuWlqeOP3Xc50Im6+TbuXPHzh077UPuLszCermFFtBmHbJTfnbH0juWRjRsuGwE77LCqHsWJNfHhV/vj+ZojpEzgY+89Lctf9uS/x24AlsAKByCWgDgom+7IXxJR9MFl3UrZZ1Nn7R+cviTwxF/XX1wycEl+XdGVHZD/C8D+77Y94VRyMB3VygBbRbMTp83Y/WM1RGNk+86eNfB4j2zOwtwZ0TTtKZpIw9gZTfa3/vVgaUHlubv9ycdtlC6sjNo8z2gzYLZmZ13V95dGVHTctmo4iKTnf2a/Zo9gPF+43sD7w3kb3CbXUe1q2q31W5zhi0A5KMblAAAuFayG+PZSOHFJ5Z8seSLiAc6H3zxwRdHgoJ8kY3GzG60AFytt9a8eeLNE/kb0N451FjdWB2xZPLSRUsXjQSWxRrQfpvsBvV/X/Xvz/77syOTNPJNFti+uemPR/54ZOSBAKB4ZQ+SvNu3f83+Nfn3+rLR+AsWLFywcEHEw/2PvPbIa19zlmyJyL7urA5ZXSpWV3RXdOff683OsM1GOwMA+UNQCwBcd9mN8SwoaNjdsKNhR/68vuxJeIAr9e62/Sv2r8i/DprLb6Rnow5LNZj9Jlk9suB66ar/a9f/tWukQyxfZB2/2QMBQPHJjh7JgrR8kT1geX80b2zeGLHwicfnPT6vdIPZb5PVJd8fBNp939svvv3iyHUHAOSeoBYASCa7Mf7AKz9q+lHTSKdXrmVBixsWwLd+XnzZifLBYMfWjq3587pmVDQtaVoS8Uj/ozsf3elG+tXKJkJknVH5doM9+z6VPSAAFL6sUz7rnM8X2QM/j9Y8duNjN45MyuHq/r6TPQiUPTiVL5OFsokNeybu/uXuX5rYAAD5QFALAORM1umVL4Htf5YfGnNojH0Bvupc7dlDZw+NdKLkWnbD9+GXfvzcj5+LuGfx7A2zN+icvVby9QZ79oCAkf1Q+NoP7Hlyz5P5c1Z29vN41jnrbOxrI3twKpsslAXhuZYd2dBR9/7f3/+7fQKAXBLUAgA5lwW2uR6JfOxo12DXoCfLga/6X8N71u5ZO9KJkitZYJh1OtW3T1g2YZn9uV6yG+xZvfMlsN0za/fLu1/2/QoK0Ydtnds7t0d0ze1a2LUw96/ngc4HX3zwxZGfx7k+sgepsiA8Xx5UzR4AcnYtAOSOoBYAyBvNs+a8OufV3N0IzwKYEyc+af6k2X4AIzfUc30WbdaBk3Xk6HRKK6t3FthWrK7orujO3evJOvB0QkHhyB6sONDx7sp38+ABiyygbWidvHjyYvuTWr5NFvqP43uf3fusB4AAIBcEtQBA3sieNJ+794FnH3g2d6+jZ0LPup519gNKWb7cUM8C2uzsWaONcysLbOcte2jKQ1Ny32FrFDIUjmzUca4nMwho80u+BLYeAAKA3BHUAgB5JxvlWb+ivrk+B52t2QhkoHRlNypzdUM969gU0Oanyztscx3Yvt/43sB7A/YF8lH2IEWuRx0LaPNbFtjm+gzb7AGgc7VnD509ZF8AIAVBLQCQt6b87I6ldyxNv24WzAy0DjQONNoHKCXZjcnsRmVqWeCXdWwKaPNbFtjeV3b/C/e/kLvXkY3m7lp1dNvRbfYF8kmuH6S4p3r22tlrBbSFIntAK9cPAP1lwb4v9n1hPwAgBUEtAJC3shtKubpR8dlA/y/6f2EfoJS8v/r9n77/09ytnwV+zqAtzO9XMyqaljQtyd3reO9XB5YeWGo/IB9knbS5OuO8YXfDjoYdETMWNrU0tdiPQpE9oPVvqx5+6OGHcvc6sg5wo/UB4PoT1AIAeW/S5IaKhor06w7NGRocMgIZSkLWSftheWdfZ1/69bMb6jqeCltT98wbZt4wMro6teyMQZ21kHu56qTNHnBsnjXn1Tmv2odCVVNTs7lm80hHdKldxwBQSgS1AEDeqz1Ru7p2dfp1+7d9OuvTWeoPpSBXnbRuqBeXrBNqzoG5T899Onev469NBysPVtoPyIVcd9JmkxmMzi8OWUd0rh4Ayq5jZ9YCwPUjqAUA8t5NlVXPVz2fft3h7cO/GDb6GIra55s+X/n5ytx10s5qumf9PevdUC82WSfUnUON1Y3V6dfvG+5r6WsxshJy4T9X/fXnf/15+nXrV9Q31zebzFCscv0AUK6PhgCAYiaoBQDynrMagevlaPlHcz6ak37drDPmzpbGRY2L7EOxmrlu5q9m/ip3Z63nKjCCUpR1HGZneyb/vOm8u/LuSvtQrLIHgLJAPrXsgbbsATcA4NoR1AIAfINcjawD0vnr6oNLDi5Jv+7dP521ZdYW9S92Y3rGThs7LWL6vBmrZ+RghH8WGBlZCdffRy9/tO+jfenXzYK7LMijuOU6kM/VA24AUMwEtQBAwcjVE+RA8RloHWgcaIwYXDdYN1iXbt2ss9JoytLSeOyug3cdzN36n7R+cviTw/YBrqe/PXP46cM5GE07rfEHc34gOCsZue6s/VvZ4YrDFfYBAK4lQS0AAFByPpp6ZMGRBenXnTrnzsfvfFz9S012BnGuzqx1Yx2un1w9+JON0K9vn7BswjL7UGpy1VmbnYFuUgMAXDuCWgAAoOR8vPzYxmMb069718/vevqup9W/VN01NO3ctHPp13VjHa6fXD34c8fmqS9PfVn9S1XWWZsF9smv+xyN+gaAYiSoBQAKRuozY6vLqtuq29QdikmuOp+yz5PszFJKU+Wqys7Kztx9fzECGa69XD34c/vTt997+73qX+p+sG761ulbc3DdDx6beGyi+gPAtSCoBQD4BqOXjX5p9EvqAMXkk+nHVx1flX7dO4anDk4dVH9yez0cX/Hxax+/pv5wLWQd6h78IZcmD92+5/Y96dc1qQEArh1BLQCQ97IOOIDvq+fJU7tO7Uq/7q2rbp1661T1J7fXQzaZ4vNNn6/8fKV9gO/jdMvpztOd6de9rWLS8UnH1Z8LsjPQG3Y37GjYUTrvAwAoJoJaACDvfTbQ/4v+X6Rft/bV8fPHz1d/KCapR6hnZ8fpfOJS2fWQqxHIvb8+Pen0JPsA30fPhJ51PevSr3vLvbV7a/eqP5f9vWXu+KPjj5bO+wAAiomgFgDIe7m6AVDWV1ZZVqn+UAx6e3uf6X0m/brjV9U11TWpP18vV51x/c/3l/eXqz98H6dauzu6O9KvW1NTs7lms/rzj3I1qSFX7wMAKCaCWgAg7+XqBsBNC6p2Ve1SfygGn+3sn9+fgw752hO1q2tXqz9fL1edcbkaAQ7FIFdn09avqG+ub1Z/vl42qSGb5JFK9j5wVi0AfHeCWgAgb2UdcKlvhGV0LEDx6Nl9avKpyenXvamy6vmq59Wf/Po+k3oEOBSToY6zG89uTL+uIzm4Erma5PHZ5M/e/OxN9QeA70JQCwDkrfcb3xt4byD9ujoWoPiceehM35m+9OtWrqrsrOxUf/Lz+85A60DjQKP6w9U4va/nvp770q9b9Yuqoaoh9edbrpPyqjVVa9Kva6Q+AHx3gloAIO9knbS56viZuOG2n9z2E/sAxaRvuK+lryXdeh744GpUvXxz3c05mBxx9vWhZUPL1B+uRv+2T2d9Oiv9umMfL99Uvkn9+edydXRLrt4XAFAMBLUAQN7Z98e9S/cuzd36t666deqtU+0DFINcdQyWrx13eNxh9efKVO2rmlM1J/26OqDg6g1vH/7F8C/Sr2tCA1ciVyP1czW5BACKwY1KAADki3c2tc9qnxXRV97X15eDv+hXl1W3VbdFjOkZO23sNPuRGTo2tHFoY0Rvb+/e3r3qQWEZfmr4weEHI2Jn7Iyd6dYtn1S+vHy5+nNlxq4of6P8jYiU1+iln+8R0RIt9gGuROqJL9nPp3A1KlZXdFd0RwyuG6wbTDCx4ZLJJcfjuPoDwNUQ1AIAOde16ui2o9siPmzs7OvM4ZPYP+iYPjB9ICKesCeX+rD8wr58uLNzZ+dO9aCwfLazf37//IiIxEHtnvKK8oqIWGgP+HaXdEBNjInp1h1ac2bqmakRYfwx5K3Ry0a/NPqliHgi5sU89eDKjDs3bsm4JRGDMdg+mPDBgs83fb7y85URo5aNWj9qvX0AgCth9DEAkDMf7Oho62iLeLvxrWffejZ3r2N0x+iy0WUREybc2n5ru32BYjJcPTwwPJB+3YsdkpDHzow5s/XMVnWAK9Hb2/tM7zPp183VGdYUtlxdN58t/WzosyH1B4CrIagFAJLJnrB++6k/d/y5I+Ldvv1r9q/J/euaPm/G6hmrPfkNxeiS0a5Jlb1S9lbZW+rP1alfUd9c35xuvVQjMYHv8f2krKyprEkdcN0AQLES1AIA100WzGads1uPbtm+ZXtE19yuhV15MA4066RtPHbXwbsO2i8oRhdHuyZWuaqys7JT/QGK5ufaRcPTh6erA4Xh4hEMiV1y5AQAcIWcUQsAXDMDrQONA40RH009suDIgojDRz98/cPXI86Xn99yfktE5NlT3bOa7ll/z/qIUS2jFo1aZP8AKE3nas8eOnsoYkzP2Gljp6kHfJ3+5/vL+8sjoi/turfcW7u3dm9ERLREi33gylw8gmFn2nVzdeQEABQyHbUAwBXLzubqWnV029FtEe9sap/VPiti24StN269MWJ77bZz285FfDDYsbVja8T5pvPD54fz7+uoLqtuq26LuLOlcVHjIvsKQH6ofXX8/PE56EQa6ji78exG9QcAAEhNRy0AXKLnyVO7Tu2KiFdL/Ov/0pkxZ7ae2fo1Z9g1xs5/eDp7XdRFAZxxl406nlMz9+dzfx4REZ1hNCkUtZMbTrafbE+3XvYgCAAAAMC3EdQCwCWyG/on+9Le2M8bG77yOwURwF6pbNRxZUvlospFrnfg2hu9bPRLo1+KiCdiXsxTDwAAAOCbGX0MABS9O4caqxurjToGAAAAAPKHoBYAKFrZCNL7lzUfaD6gHgAAfDfDw8Mdwx3qAADAtSWoBQCKThbQPtL/6M5Hd6oHAADfT//Tn3Z/2p1+3Zqams01m9UfAKBYCWoBgKJRv6K+ub55JKAdtWzU+lHr1QUAgO+nfO24w+MOp1/3XO3ZQ2cPqT8AQLG6UQkAgEI3o6JpSdOSiHv6Z2+YvUE9rrUsAK99dfz88fPVo1C827d/zf416gAA10L5pPLl5csjoi/WRMLvr0MdZzee3RgxJsZuHquzFgCg6AhqAYCCU7G6oruiO2LOgblPz306oqamZkONgPa6yQLaGQubWppa1KNQvNsmqAUAAADIZ0YfAwB5b3TH6LLRZRH3VM9eO3ttxOITS75Y8oUzu4Bvlz3YkcqZMWe2ntmq7nw3PU+e2nVqV/p1b9pyU/lN5eoPAACQmo5aACDvZMHK3T+dtWXWlogJk29tv7U9YtTCUS2jWtQHuHLjzo1bMm5JxGAMtg+2X//1BtcN1g3WqTuFxZnuAMXls5398/svHFmyM3amW7esr6yyrFL9AeBqCGoBgJzJOmUnTW6oaKiIuH3plHun3BtR0/KVTtnFsVi9AADIjfI95RXlFRHRmHbdsxuGfjz044horYka28AVGq4eHhgeiIi+tOvetKBqV9WFyRCLYpF9AIArIagFAK6bLIitG6jbVrctonbu+KPjj0bc0lO7qnZVROWGys7KTnUCrp/yteMOjzucft1ztWcPnT0UMaZn7LSx0+wDV+bkhpPtJ9vTrVddVt1W3abucCXGrih/o/yNiJTdiRERQ3OGBocG1Z+rMzw83DHcoQ4AUAgEtQDAFctu6I5eNvql0S+NBCDlk8qXly+PuOXe2r21eyPKm8YuH7v8awOKpmiKCE9YA4lkn0/RF2tiTbp1hzrObjy7MWJMjN081lna5Kns+3k8EfNinnrAP1P2StlbZW9FRG3adQVufBf9T3/a/Wl3RGxIu+7FM8+X2QMAuFKCWgC4xJ1DjdWN1SMjeEtV9hfsbzyz7ptv6LZES0T0uJaA/GBUJYWgt7f3md5n0q9b9fLNdTc7UxmuSOWqLyfBtMXEmJhu3YuBm2NAuApnxpzZemZrRETURcLPeWeeA8DVE9QCwCWyzquampqWmpYSLoQnoIEiYVQlheBisN8YO1Neq2VlZU1lTeoPV6NidUV3RXfE4LrBusEEAdglgRtcsVTXZ6Z+RX1zfXNEtKg9AFytG5QAAAAoVjU1NZtrcjB6uOfJU7tO7VJ/rkz/vf17+vekXzc7sgC4cuPOjVsybkm69VIHbhS2XE1oKFtU9nzZ8+oPAN+FoBYAACh6WQdUKjqguBoXR5smlp0pD1y52lfHzx8/P/26uQrgKCyf7eyf35+D67Nq8c0Hbj6g/gDwXQhqAQCAonfzj9PeQMw6oM7Vnj109pD688+d3HCy/WR7uvVGd4wuG10WMaZn7LSx09QfrkbVL6qGqobSr3t6X899PfepP/9c/1D/2v616dc1oQEAvjtBLQAAUPRq544/Ov5o+nVPt5zuPN2p/ny9XHXIVbdVz66erf7wXdQ8ccuxW46lX7d/26ezPp2l/vxzp1q7O7o70q9705abym8qV38A+C4EtQAAQNG7pad2Ve2q9Ov2TOhZ17NO/fl6ueqQy9XoVigGo5aNWj9qffqR+t2V3Yu7F6s/Xy+b4JH6TOPqsuq26raR9wUAcPUEtQAAQNGrXFXZWdk5MvI1lVx1tlAYPh48NvHYxPTrGlEJ399tGyctn5TwjOfzTeeHzw87q5av90nrJ4c/OZx+3fH/rW5H3Q71B4DvQ1ALAACUjEmTGyoaKtKtl3W2DLQONA40qj8XZJ1PfcN9LX0t6dbNHlSoqanZXLPZPsD3Ubu+dnLt5PTrfrLn+JjjY9Sff9Sz+9TkU5NL530AAMVEUAsAAJSM2hO1q2tXp1/3o6lHFhxZoP5ckKvOp7qBum1129QfroX69gnLJixLv+7hPR++/uHr6s8F2YM/XXO7FnYtTL9+rs5sBoBiIqgFAABKxoQJt7bf2p5+XTfWudTfyg5XHK5Iv+7EmtuO3HZE/eFaatjdsKMh4ejXbATyyeYTm05sUv9Sl6sHf7Lr3tm0APD9CWoBAICSkd1QzNWN9a5VR7cd1dFYsrIR2KlHHmdy9aACFLNcPQBxpPFvc/82V/1L3V9XH1xycEnpXPcAUIwEtQAAQMnJ1Q3GvzYdrDxYqf6l6j/LD405lIOzJXU+wfWTPQCRnQGdSjbqNht9S2np7e19pveZiMF1g3WDdbm77gGA709QCwAAlJyG1smLJy9Of2M966TMbrBSGrIg5cPyzr7OvvTr63yC6yd7AGLS5IaKhhyMNH9/9fs/ff+n9qHUvN/43sB7Azn4+cmDPwBwzQlqAQCAkpWzG+s5usFKbuQqSMkeRMgeTACun7uGpp2bdi79utkDIDprS0P2oNfJDSfbT+ago3VK5x2779htHwDgWhLUAgAAJWvmupm/mvmr9OtmN1idWVvcct1JO3XOnY/f+bh9gBQqV1V2VnZGVJdVt1W3pV//Lwv2fbHvC/tQ7Pb9ce/SvUvTr1uxuqK7ojuivn3CsgnL7AMAXEuCWgAAoGSN6Rk7bey0iPoV9c31zenXf+9XB5YeWBrx+abPV36+0n4Um/81vGftnrW5W/+un9/19F1P2wdI6Qcd0wemD6RfNzuz1mj94pQ92JUdoZDaHZunvjz1ZfsAANeDoBYAACh5Mzvvrry7Mv26g+sG6wbrIjrq3v/7+3+3D8Xiw7bO7Z3bczea8s6hxurG6pEHEYB0slHjWQdiantm7X5598seACoW2T7uHX7nuXeeS79+NkK/8dhdB+86aD8A4HoQ1AIAACWvpqZmc83m3HXWfjDYsbVjq06oQpeNOj7Q8e7Kd3MYkNy+dMq9U+61H5BLd/901pZZW9Kvmz0AtD/+8uZf3rQPha79wJ4n9zwZcb7p/PD54fTrT583Y/WM1RGjlo1aP2q9/QCA60FQCwAA8KVcddZm/tT6hz/+4Y8jgR+F5c0Nf+r5U0/ubqhnDxpkDx4AuZPrztrsbGxnoRembDJDNtI6NZ20AJCOoBYAAOBLue6szQK+LPAzurIwvLOpfVb7rNydHZj5P8vmrJmzxn5APslVZ23m7ca3nn3r2YiB1oHGgUb7ke+yyRrvRPvy9uW5ex06aQEgHUEtAADAZX743L/+73/937lbPwv8spGH5Kes4ynrXMsVZ9JC/so6a6vLqtuq23L3On7X+9svfvuFwDZfZfuSTdbIFZ20AJCeoBYAAOAylasqOys7I2ZUNC1pWpK715GNPMw6NskP2SjRXHc8ZTfUZ8cP5/1wnn2BfHbvQ/dtuS+HnbXZxAaBbX7J9iHbl1yNzs/cV3b/C/e/oJMWAFIS1AIAAHyDpu6ZN8y8IXdnDGayjk2BbW5lAW02SjTXZjXds/6e9W6oQyHIRuvn+gEggW1+yLeANjvyIesABwDSEdQCAAB8gywAm3Ng7tNzn87968kC2z9U/f4nv/+JM2xT+WBHR1tHW/4EtNkN9TtbGhc1LrI/UEjy5QEggW1u5FtAm01mcMY5AOSOoBYAAOBb5EsnVObkhpPtJ9sjfl/1uwW/W+AG+7WWBeBZB/O7ffvX7M+DG9huqEPhyx4AmrfsoSkPTcn967k8sM0mB3BtZXXdXrvt3LZzuQ9oM9lkBmecA0DuCGoBAACu0D2LZ2+YvSGiuqy6rbot96+nb7ivpa9l5Ab7yeYTm05ssk/fVRZ4ZwF41sGcL+bufeDZB551Qx2KQXYW+v3RvLF5Y+5fTxYcZpMDsgdVTG74bi5/4CdfJjJkGnY37GjYYTIDAOQDQS0AAMBVmrfi32r/rXakwzHXshvsf/jZGy+88ULE20/9uePPHW6wX6lstHHW6ZQF4Pki6+Sub5+wbMIy+wXFJAvK7hxqrG6szp/XlT2o8j9bf/Pib16M6O3tfab3Gfv1bbI6ZXXLtwd+sgfNmmfNeXXOq/YLAPKBoBYAAOAqZR2Nj9Y8duNjN+ZPYJvpmtu1sGthxNajW7Zv2T4SRHJBdiN924StN269MX9GG18u63jKOrmB4jU7fjjvh/PyZ2JDZnDdYN1gXcTOnTt27tg50iF6rvbsobOH7FtWh+wBqaxOWd3yRfZzypzjc38+9+cjI7gBgNwT1AIAAHxH2ejK+8ruf+H+F/Lv9WWdtlkQmQWT2Vl5pdJxm42E/kPV73/y+5/k7430jI4nKD1ZcPZI/6M7H92Zf4FtJusQ3dL6P+b/j/mlF9xmX2f2dWd1yB6QyjdZQJs9WJb93AIA5I8blQAAAOD7aWidvHjy4ohYdeGf8+0sukwWTL4dF15fdgN36rY7/37n3yNuPzxl55SdhXsjN7uB/knrJ4c/ORzx19UHlxxckr+B7OWyYCYLanQ8Qem5GNhuenTloysjth7dUralbOTBm3yTBbcftnbO75wf0fDUhUkAUzrv2H3H7sIf2Z492HS89+MpH0+J6GrNz0D2m2Rnm1e2Vy6rNDofAPKSoBYAAOAaKZTANpPd+P9gsGNrx9aID2o7oiMiKiZU3FhxY8RtGyctn7Q8onZ97eTayRE1T9xy7JZjuQ8Qs9HFp/f13NdzX8THg8cmHpsY0dd62dmy66IuBLRAAco+Bx5tfWzHYzsi9pTtfmn3S/l3hvblss7Srrld0RURo1eMfnH0ixF1A3Xb6rZFTKy57chtRyJuabul8ZbGkaMEciV7wOd0y+nO050jgWx3Zffi7sWXBOSNhXX9PND54IsPvhhR3z5h8YTF3k8AkM8EtQAAANfY5YHt3uF3nnvnufztiLpc1oF6McD92YUAN1MxoeLFihcjxp0bt2TckojaV8fPHz9/5N/fcm/t3tq9V7/uZzv75/fPjxiuHh4YHojo3/bprE9nRZx56Ezfmb6vDSh2xs7CvU4EtMC3ySYcZB22v6/6Xdvv2vI/sM1k3/e64ssANy4EuNF64d+PXnFhskN1W/Xs6tkRVS/fXHdzXURZWVlTWVNE1S+qhqqGIkZtLztYdvDK1z27YejHQz+OGJozNDg0GDE8PNwx3BHR//Sn3Z92R/S19O3v2x9xvvWy78uNhXmdfGXEcWvl4koBLQAUBEEtAADAdZIFtje1Vj1f9XzE7zp+G7+Nwglsv0kW5A7GYPtge8TJvpPtJ9sv+QPfPTy9ELz2fflPc7/8dbjIrovdF0aDZmfQCmiBb3P5SOS31rzZ/GZzxMkNl33+Fpjs+2H2dZwcPBknL/yrrbE1In72Hb+vNF72/SSzobiuC2fQAkDhu0EJAAAArq/sxum//3rR64teH+mkpLTcUz177ey1EQ+88qOmHzUJaIGrl31uPNz/yGuPvBYxo6JpSdMSdSk12c8RSyYvXbR0kYAWAAqZjloAAIBEsrP4Fsbj0x6fFvHutv1L9i8ZGTFMcck6nf5t1cMPPfxQRE1NTUtNi7oA1849i2dvmL0horb5wlniu+97+8W3Xyz8yQ18w35/+cDPjIVN85rmRUTEvJinLgBQyHTUAgAA5Eh2g/3hl3783I+fGwn2KGzZaOOs06mmpmZzzWZ1Aa6f+vYJyyYsG5ncUL+ivrm+WV0KXcXqiu6K7ogFCxYuWLggYsbCppamFnUBgGKioxYAACDHshvsSzYtPbb0WMT+ob+8+Zc3Iz4s7+zr7FOffJfdSP/Xife9eN+LEfXtE5omNEVExPow2hhIKJvc8HBcGI38YVvn9s7tEQc63l357kqdtoUi65xtXHXXwbsORoyqMSofAIqVoBYAACBPZGcP3h/N0RwRt/dOeWbKMxHvN7438N5AxMkNJ9tPtqtTrmWdz9PnzVg9Y3XEjBM6nID8dGdL46LGRRGTN92+5/Y9HgTK230aaqxurI6YuW7mr2b+aiRwBwCKn6AWAAAgT2Ujcx/ufyQeiYiuVUe3Hd0W8d6vDiw9sDRicN1g3WCdOl1vlwezjZO/7HBaOKplVIv6APnv8geBZtbOPDTzUMT7q9//6fs/Fdymlo2mntl5d+XdlZeMyF+mNgBQagS1AAAABaKhdfLiyYsjGlonfzH5i5Hg9q9NBysPVkb0Dfe19LWo0/eVjTK+Y/PUl6e+LJgFik/WsXl/NB9oPiC4vd6+0jHbr2MWALhAUAsAAFCgLga3MTkmR0Rvb++C3gURH205su/IvohjR7sGuwadSfitddzdsKNhR8SUzjt237E7ov7EhTODAUrFNwW3H7380b6P9kX87ZnDTx9+2iSHb5M96PODddO3Tt8aMXnowsjprKNZxywAcDlBLQAAQJHIRifWLKuJmoiYvemHK3+4MuJE5yfNnzRHHO/9eMrHUyK65nYt7FpYevXJAtmJNbcdue1IxIQJt7bf2h4x6pVRTaOaIiKiKZpcRwBZcDsjmqY1TRs5i3ugdaBxoDHio6lHFhxZEPHx8mMbj20svQC3uqy6rbotYvx/q9tRtyPi9sNTdk7ZGVF5ovKLyi/+4Y8uikWuJwDgm/3Lf31JKQDIR9mNgOGnhh8cfvD6r1feNHb52OUjNybA+8L7olD19vY+0/tMuvVu2nJT+U3ll3SMUFDXyel9Pff13BfR8+SpXad2RZzccLL9ZHvhfT3ZmX9VL99cd3NdRO362sm1kyNqnrjl2C3HXJ/kxuebPl/5+cqIz5Z+NvTZULp1L555CQl/Pj1d29Pa0xrRs/vU5FOTIz5949NZn84qvCA364wdv6quqa4povZE7era1RG3tN3SeEujn4sBgGtHUAsAAMDXym68n319aNnQsoj+5/vL+8sjho4NbRzaGDG05szUM1NH/vy1CnizwDVTvnbc4XGHI8onlS8vXx5R9YuqoaqhiLGPl28q3xRRuaqys7LTfgHkq8sfWMgeEMpkDwplzow5s/XM1u8f8GaB67hz45aMWzLy+7Wvjp8/fn5EWV9ZZVllxE0LqnZV7fLgGQCQnqAWAAAAAAAAILEblAAAAAAAAAAgLUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAiQlqAQAAAAAAABIT1AIAAAAAAAAkJqgFAAAAAAAASExQCwAAAAAAAJCYoBYAAAAAAAAgMUEtAAAAAAAAQGKCWgAAAAAAAIDEBLUAAAAAAAAAid2oBJC/PtjR0dbRln7dsr6yyrLKiDtbGhc1Lird+netOrrt6LaIoTlDg0OD6da99eDE1omtEZWrKjsrO70PuOBk84lNJzZF9D/fX95fnm7dGQubWppafO763CUfr5/bn7793tvvjRjTM3ba2GnqVez1gmthoHWgcaAx4pPpx1cdX5V+/Vvurd1buzeipqZmc81m+5Gvent7n+l9JuL0vp77eu5Tj1Tvi4s/F75S9lbZW/4+6OcWP7fg85rcKt9TXlFeEdHQOnnx5MXqAdeToBbyUBbIvPuz/S/sfyF3r+PW2lun3jq1dP9ikAW07/btX7N/TcJ1y4eqh6oj7o/maPZ24Ev/cXzvs3ufjRjsG6wbrLv+6zXsbtjRsCMiFvrcTemW1tpVtavcmCtUqb9f3NJRu6B2QcSYGLt57Gb1KvZ6wbXw/uH3try3JaKrtmthVw6+x1f/sbqtui1i4ROPx+O2I29lN/xTf06XrJ2X/XPtl7+2xcSYGDG6Y3TZ6LKI6rbq2dWzI6pevrnu5rqIqn1Vc6rmRNxUWfV81fN+fvRzCz6v1YNrq/6l+ub6ZkEtpGD0MeShI41/m/u3ubl/Hf/5y/98+T9fLt19yJ5gTe3Y0a7BrkHvAy7InpAdXJcmoM1MrLntyG1HSqfOx584/srxV/Lgc7f80JhDY/5/9u42xOorzxf9upCYi6lT1KSLiu1TLOvB0pgaJnGctFecOeHMdNoRTxBxmtw+gwQJEkRCCI000i+CNEXThCDSSBCRYU5uj4hkPJ6afpgjaZFK46TTJ8ZoWQ+Wj+lMUW0Kp0ZuTODeF2ZZjomJD7V//733//N506Q77apae+/lf6/vWr+f9z0AU+vTHZ++/OnLKY2sKCagzcaujq0fWz95sxf4ep90f3L1k6spXXz1Yt/FvpTev3xs37F9Kf26660X33oxpTdn7L+y/0pK/89L/739v7en9PaOvsf7Hp+sEJU//wAAVCdBLVSRKzP+/cS/nyh+AyUbOHLqwKkD5X098k3iWS9dO0EW/UU8f7Gm3Ib3Dh0dOho3Xj6xX5YTk3nj6lRD/1j/WPE/Tz6oYUMNgKl0umF4+fDy6vl5HEyCyn2PzM+1Ocjdd3rvm3vfnAxwHZQAAKguglqoIud7zg+cH6i+L3plDwzbn+9Y17Euftxzo2fbz7b7XJRVDuqib1h3Ll+wekGJahFW28Z1XncvXDi/7Lza5wBMkQ+2Hl97fG31/DwOJkH882UOcPMN3F899Ivv/uK7glsAgKIJaqGKVNsGyvWfq/t40/Gm8r4u+WZhvmkYJd+stoFVTjmoyxsrURa+sHDDwg3lmefBaQONA43WXQDqUw5golsofB0Hk6B4uZRyDm5/u/+dl955yfdPAIBoglqoAtW6gZLpJXVNUTcNbWCV09Drg3sH98aN1zyteU/znsmS32VZd/P6Zt0FoB5Ve4lhB5OgeuTet/+j5x9f+8fXUhodHd04utG8AABUmqAWqkCt9Ggqey+ptoH23vbe+HFtYJVL7lWdT7hHefTY4vHF49ZdPycA9SS6hcKdygeTBEJQPfIB8t7eg70He7VCAgCoNEEtFKioHpR3q+y9pJq2NPU39U/ePIySN7BygEd9G941fHT4aNx4uaT37Nlz+ub0lWeea2Xdzb3ElKAD4E7kYCW6hcJdP//sHTo6dNTrBtXo111vvfjWiym9vaPv8b7HzQcAwFQT1EKBiupBebf0krqmqJuH0QEexRjcOLBhILBH7Lz5rY2tjSndv+n+n9z/k/qf31rbuM5ONwwvH17u8wHA7YluoXCvHEyC2vmcCmwBAKaWoBYKVGsbKFnZS/EWdfMwOsAjVi75F92reuHEoiuLrpRnns+Nnm0/216D6+7W42uPr/U5AeCrFdVCYao4mATVLwe2p/b0v9n/pvkAALhXglooQK1voORSvOM9413jXeV7/fLNwwUTXc1dzXHj5gCvrPNe76JL/uUS3rmkd1nW3ZEVI6tGVtXez58//3r4AfCVzxM1XoHFwSSoHW+nvs19mz2fAgDcK0EtFODkT0/uOrmrcn9+VA/Vkw0npp+YXt7XsW1d+9L2pfHjDncOrRxa6XNUL4rqVd1xtfNy5+XyzHOlN64btzZ+2PhhwO+hhx8AX6HSFVgq/T3DwSSoPf+r51f//Kt/VrocAOBu3WcKIN7ZzWe2n9meUtqWZqYKlDj9kx2Pn3j8REq/ev6X6ZcV/D1yyaMlO/705T99uTw9LrOWlpadLTtTatzaeF/jfXElaweOnDpw6kBKT6xZ8uqSV32eat0Nvar3fhJYCn3+RNuRtiMppZSeSc/U/zxf37iu0Lr7Z3OffO3J11L6Vfrlj3/5Y+suALEuLruw48KOyj2P5oA2H/QaS2NprIK/Tz6Y1LKpJbV4eetefn8t/S9P7n1yb/39fp8+c3Xx1cUpXfrBpYZLDV/83y/t/8Pjf3g8patvXv3R1R+lNLZ+7J2xd1L6pPuTq59crf7fL/+c70z8y6F/OZTSt9KytMzbGqzX1LxpH017a9pb5gEiCGohUKU3ULJZfbM3zd6UUvMbzYuaF02WKq6U3EtqQepKZazI27Gzc1fnrpR+O/bOD9/5YdwX4fx+yq83tel6r+qg0D2X7C5LwBfV+zd/Dlufa13RuqLyJZbLvu4C8B+de/bc7nO7K/fnf+NS88vNL6c0Z9ucv5/z9ym93VPZ38fBpHJ5YNMDrz/wekotl1p+1vKzOvwFP293NCvNTrO/7H/Pz4y708/SDb9/vqH68bqPJz6eSOn8kXPTz02fPPgddVD4Tj+3baPtG9s3Th5sBqzX1KgtpgCiKH0MgSq9gTLrpVnLZt1wdDWqtGnZe0m1bWhb2ra0/t5PVFZRvaqLKtldlEqXCr553Z3b8sjQI0PWXQBi5CAnBySVMuPCjK0ztqY0/aMHFz24KK7VSv+8k4tPLvY6U075gEIOPHNFpTUX1n629rOUVq5ctXLVyi8+jxbtva7fjf9u3OsHAHC7BLUQIGwD5e+++fQ3n5785zlb5nTO6az871f2XlJ5w6r1cOvB1oNx4+aepnoB1abzPecHzg/EjZd7qJblZHtU79+b193Zs+f0zQkI3vO6m2/WA1BOuYVCpT285+Guh28o4RB1ILTSPXehluXn+r+89O2ffftnKf3l63/1/b/6fkoPHHtg2gPTivu58kFUvaYBAG6PoBYC5BKVlfbw0hm/mfGbyX+OPvFe6Ztr1a69v+Nwx+G48XIJ5KgNOqZW9I3IXKK7LG7o/VvR3l43r7v55kPUwY2hrsEVgyt8ngBK+zzRfbzpeFPl/vx80Ct/r8iiD4Q6mARfL7fi+K9vPHPgmQNx+wC34mYtAMDtEdRCgMFpA40DjZUf51Y35aJOvOcbw2W94Zm/GEefYD43erb9bLvPWa0Y7xnvGu+K7ylVVInuolR64/rr1t2oEsi5F24upQ1AuZ4nxq6OrR9bX7lxvrllZvfM7i/+99EHQh1MgtuXP5/fvvSd3u/0Th64iJZv1npOBQD4aoJaqKCoDZSv60kTdeI9i7pBXK06ly9YvWB13HiCmtpysuHE9BPT48bLNztvvglTr/LnoOh1N6oEcja8a/jo8FGfL4CyGO4cWjm0svLj5N60txJ1INTzLty5XOnlqU3/pf2/FHiw9+RPT+46ucvrAQBwK4JaqOQXkqBAZu6rj3z3ke/e+n+PPvEeXdK12ix8YeGGhQX00oruecrdqXTP1JtFl+QufN0N2gi6uTftzaJLIOvhB1AuA0dOHTh1oPLjfN3Bo+gDoQ4mwZ1r2tLU39Sf0hPNS15Z8kr8+L//fz9c9eEqrwMAwK0IaqGCogKZhz+asWXGlq//9x49tnh88Xjlf56y95KKDsazqBLb3J2RLaf3n95f+Z6pWS5xlktyl0XUxvWc43N75vZ8/b8XVQJZDz8AzxNTKT/H5oNH1fLc62AS3L2uMwuPLzwe36onV7pxIx4A4MsJaqECojZQchCTT8h+nehSnGXvJRUVjPsCXBuiewk/sn3e5nmbyzO/OaCs9LqbN7asuwDU8/PEN//PmQdn3kFFiKgSyA4mwd3LBy8WP/XY1se2xo//8fyPD318yOsAAHAzQS1UQNgGypaZ3TO77/yLWVQpzrL3ksoBTfSJZT2Aqkt+/+fPQ5SiSnAXJSqgnDe/tbH1Dm6uW3cBqMXniTnL516Ze+UO/v3gEsgn+j848sER7wu4G20b2pa2LY0f99IPLjVcajD/AAA3E9TCFIreQJn7xtzn5j53F/+/oFKcWVl7SeWA5k6DnXt1dvOZ7We2+zxWi+jewbNemrVs1rLJUoT17tMdn7786ctx6+6MCzO2zriLGwjRvYId2ADwPHE38gHDlpaWnS07b///l587og4mXXz1Yt/FPgeT4G4U1arn0v4/PP6Hx80/AMDNBLUwhaIDyZZnHz7z8Jk7//9F3/Qsey+phROLriy6EjdeLgk33jPeNd7lc1m0D7YeX3t8bdx47c93rOtYV575Pd0wvHx4edx4d1vKOPcKjlp3o3r1AlBfzxP3esAw+kCog0lw9+60xPm9uvrm1R9d/ZF5BwC4maAWplBUIJlPqucbm3cq+qZn2XtJ5V6WuadwlJMNJ6afmO5zWZQclOf3f6XlALC1Z/6a+WvKM89RG9f3uu5mUetu7tWbe6YDUJtGR0c3jm6Me56428oRWXRvdgeT4O49dPSh5Q8tNw8AAEUT1MIUiN5AmaqT6ndbOvluRfWQrFaPblu8b/G+uPHOnB65PHLZ57Mo0UF5dIntokUH4TNWfPP0N0/f+5/Ttq59aXtgT7Ch1wf3Du71eQSoVcN7h44OBVbsudegNR9oWjDR1dzVXPmf18EkuHsPvtTwy4ZfmgcAgKIJamEK1NoGShZdijP3kCxrL6n5E21H2o7EjZc3rsp6k7lo0UF5dIntokUH4XO2zOmc03nvf07u+Rd1w14PP4DalHuwRz1PTFXliCz8QKiDSQAAQI0S1MI9qPUNlKxz+YLVC1bHzVtZe0nl1y2/jlHKfpM5Wr7RkYPySmue1rynec9kiW3rbmXmd/pHDy56cNHU/bmPbJ+3ed5m6y4AX+7ChfPLzi+Le56Y6t6y0QdCHUwCAABqlaAW7kGtb6BkbQPtve29cfNW9l5S7f0dhzsOx42XbzLngIvKOjd6tv1se9x4jx5bPL543LpbKR1XOy93ViAQXvjCwg0LN8TNmx5+ALUl+oZopXrLOhAKAADw1QS1cA8+6D7edLwpbrxKbaDkm3hRpTjL3ksq3zCImu8sB1xURr7BkYPxSss3VCq1LlSr6I3rqSp5fLN8Qzff2LXuAnDj80S+IVpplarYkxV1INQBRag+M/7um09/82nzAABwM0Et3IW8gTJ2dWz92PrKj1fpDZTs0W2L9y3eFzePZe8l1bGzc1fnLvNdL873nB84PxA33rz5rY2tjZVfF6pt3Y3auJ710qxls5ZNfcnjL6wDFbqxeyvRB4wAuDPRN0IrVbEnK+pAqAOK8PU+7r309KXA4LThSENjQ6N5BwC4maAW7kK9baBklbo5ditl7yXVtqFtadtS810vBqcNNA4Ebjy0rWtf2r60PPM7vGv46PDRuPHan+9Y17Gu8uPMn2g70nYk7vfKB4zGe8a7xrt8bgGqzdnNZ7af2V75cXJljtae+Wvmr6n8eNEHQh1Mgq93aeLSK5deiRvv4T0Pdz3s+RMA4AsEtXAXonr9RW+g5Jtj+QZvlLL2ksrznW/uRYm++VnvcuAVdcM+30hpaWnZ2bKzPPM8uHFgw0BAT9foktL5RnT4uttwYvqJ6T6/ANXi4rILOy7sSOnytsszL8+s/Hi5MkeU6AOhDibB1/t9z4fHPjwW9/2l0pVqAABqlaAW7kDeQMkltSotegMli7rBm0UF39Uq6uZeFn3zs94Ndw6tHFoZN170jZRqWXejN66jS0q393cc7jgcN96Z0yOXRy7r4QdQLYa6BlcMrogbb+HEoiuLrsSNV9iBUAeT4AtGR0c3jm6Me75+ZPu8zfM2m3cAgFsR1MIdqPcNlCzf4M03yyotB98jW07vP72/fO+r6Pl2w2BqRR80iC6VW7Rzz57bfW533HhFlZSe1Td70+xN8euuHn4AxcoHZkZWjKwaWVX58fLNttw7Nlr0gVAHk+CL3uv63fjvxgOfrwfae9t7zTsAwK0IauE2lG0DJYu+0Tv0+uDewb3lfZ9Fz3f0TdB6E33DPt9Aib7pWfS6e6qhf6x/LG7dLbqkdOfyBasXrI4bTw8/gGKdbhhePrw8bryiK3MUdSDUwSSYvEl78dWLfRcDWnzkFj9F72sAAFQ7QS3chrJtoGTRN8vyF8ay3vSMvkF9dvOZ7We2+3zfregb9tGlcYsWvaHasbNzV2cV9MqOvnHghj1AsaJbUkT3ir2V6AOKDiZRZvkA5JHHD+86HPi8+8f9f9L0Jz53AABfS1ALt/PFfuvxtcfXxo1XLRso+WZZvmkWpay9pPJJ4+ZpzXua91R+vNyTKJ+s5vYUdcM+l8YtzbobvKHatqFtadvS6lkHrLsA9S0fkMkHZiotV+bIvWKLFn1A0cEkyuytHx66cOhCXE/afJO26Eo1AAC1QlALXyF/kY/6QlNtGyhZ9E2zsveSevTY4vHF43HjDe8dOjp01Of9dkXfsK+Wm57R627UxnXeSKq2dTe6soIefgCxog/IRPeG/ToOJkHl5Oe5Xz30i+/+4rtxpY6zP/3+n/3vP/vfXgcAgNslqIUq+iJfbRsoWfRNs7L3kpo9e07fnMAv0jmg4fZElyislpueUaJ7J7c/37GuY131zUN0ZYW87kYfRAAoq6jnr9wLNvr58nZFH0g71dA/1j/mYBL1KVdK+h89//jaP74WH9A+1ti9tnutnrQAAHdKUAtfIn9xj95Aae2Zv2b+muqbj3zTLN88i1LWXlL3b7r/J/f/JKUFE13NXc2VHy8HNCNbTu8/vd/n/1bKXqIwysCRUwdOHYhbd6t14zq/7vl9ELbuBpf6Byib/LyVn78qLfeCzc+X1aaoA2kOJlEPrsz49xP/fiKlt3f0Pd73eEq9vQd7D/bGVQTLcuueJ9YseXXJq14XAIA7JaiFL5FvckZvoFS76JtnZe8l1baufWl74MbVudGz7Wfbff5vJfqmZ7XesK8UG9fV8T7Quxqgvp63op8n71RhB0IdTKKG5ED21J7+N/vfTOngGwcOHTiU0t6ef3j6H56evCkeLR98/Pal7/R+p9frBABwt+4zBfBFQ68P7h3cm1IKOg1a7RsoWVE3z3IJ6m+lZalMlZBbWlp2tuxMqXFr432N91X+ZPTIipFVI6tSWrZj+brl66o/wIp2/aZnd2XHuX7D/tXqvGFfKdc3roMOZcx9Y+5zc59LKW2q7nnJlRZ+89Lb33/7+3FBdu5d3bKpJbX4+APcsxy0jPRce96qtNz7tWX9tefJapcPhF5MMaVabz6YlJ+7oRK+7gDcvx796MmPnpz854/+9vc///3PU/q36f+279/2pXS556bvgVeL/X3y95XvtPz1fX99n++NAAD3SlALN8gbKFG9XGptA+V6Sd4dXYe6DsWd3M0lqJfs+NOX//Tl8n0RzL27fjv2zg/f+WHlx8s3ylvT/DTfspAuLruw48KOlD55PiYg61y+YPWC1eVbd6M3rmddmL1p9qbamad8A/hUill38/pe1nUXYKoN7xo+Onw0pRR06y269+u9ygdCcwDkYFLJnrc///69Z8/uubvnlnIKetONN1InD4zPTDOr54e8OaDVixbKZ2z92Dtj76T0q4d+8d1ffNd81LqHdn1j5jdmKl0P1UBQCzd+UbeBclvyTbRTz/f/uP/HlR8vb9ScTtd6SS1IXalMlZBz767f9ryT3gkYL/cGFtReM9Q1uGJwRUoppR+ngPf7whcWbli4IaVUktu053vOD5wfiBvvke3zNs/bXIPrwOeVF0719vf2B5aWyz38yrbuAky1wY0DGwY2pJS2xQQv13u/flQb85MPBM3b0Xqo9ZCDSVBNcg/ab8+/VuLY5wTKK+/PRV1wocI2fF66cI2pgKLpUQs3uL6BEuT6BkqNmdV37SZavpkWpay9pHLvrtbDrQdbD1Z+vNwbON90LKtPd3z68qcvT5aErrS8AZJf77KI/lxfD8JrzA2l0K27ADUklzytdAuL68/pn/d6rdXnieutCYLlg0nApMcau9d2r01p1bOrn1r9lIAWAKBSBLWQJkub2kC5M9E3027uJVU27f0dhzsOx40XfdOx2uQS0FEePbZ4fPF4eeY3euO6XoLw6EoMZV93Ae5VLq0b9rz4ea/XWuVAKBQnf+5Wrly1ctVKpTABAKIIaiGldO7Zc7vP7Y4br9Y3ULKibqZFb3hVi7xxlXsDVVrZN6xyCehKy69n7s1WFtGf43oJwouqxHByywcvfPCC5wWA25Urc+TSup4n7kxRB0LzAV4og7xuPNG85JUlr6S05sLaz9Z+NlnJBQCAGIJaSs0Gyr3JN9PyTbUo+fXKr1/ZdC5fsHrB6sqPkzesxnvGu8ZL1Jwyl3zOJaArbd781sbWxvKUEsuf2zOnRy6PXI4bt97W3VyZIUouAV72kugAtyu6Mke9PU8UdSB0qGtwxeAK71/KZeLMxPaJ7eX73gcAUC0EtZSaDZSpUdRNtbL2koreuBruHFo5tLI883vypyd3nQwsLbtwYtGVRVfKt+5+0v3J1U+uVn68BRNdzV3N9bfuFlWZYXjX8NHhElY0ALhTUZU5srZ17Uvbl9bP/BV1INTBJMokP4/ng9Bvzth/Zf+VlPbP3nffvvtSGtlyev/p/eU9IA0AEEVQS6nZQJkaRd1UK2tp3uiNq4Ejpw6cOlCe+T27+cz2M9srP05+/Zq2NPU39Vt3K2XuG3Ofm/ucdXeqDG4c2DCwIQFwC9GVOXJPyXotVVrUgVAHkyizXFnp111vvfjWiyntO733zb1vpnRqT/+b/W+aHwCAqSaopZRySR8bKFMj31RrPdx6sPVg/BfI0dHRjaMby/c+jtq4yiet671nV/798vuq0jqudl7uvFye92tRG9e5t3O9rrv5xnD0uquHH8CXi67MEd3LNZqDSVC8/H3w7dS3uW/z5I3bsn4PBwCYaoJaSim6lGvHzs5dnbvqf17b+zsOdxyOH/fklg9e+OCF8r2P88ZV7n1caeeePbf73O76nc/o32/+RNuRtiPleb/auK6Mom4M6+EH8OWiK5EU1cs1StEHQh1Mglt/Pnp7D/Ye7E3pt/vfeemdl8wLAMDdEtRSStEbKG0b2pa2La3/ec0316KCw6ysvaTyxlXufVxpZ06PXB65XH89ivLvk3szVVq99kz9OlElpbN637i+ed3NN4ituwDFyIFeVA/23EIht8Sod0UdCHUwCb7e+5eP7Tu2L6WDbxw4dOCQnrYAAHdKUEupjGw5vf/0fhsolda5fMHqBavjxy1rL6mo3sf5c3Phwvll55fVz/xF/z712qv6VqJLSpd13S3qBrEefgDXRAd6RfVuLYoDoVD9couTXzz0Tyv/aaXAFgDgdt1nCiiTc6Nn28+2p5S6Ysa7voHybLnmuW2gvbe9N6X3ZxxLxwLHzb2kHrvQvb57fXnmO/c+btzaeF/jfZUPxPLnqDXNT/PrYP4+6D7edLwppVThwxvXe1Wvr89e1bdyw8b1j9OPKz9e2Xr/ZvkG8fs91240RDl+6P1t729L6bFV5Vp3AbIc4I30XAv0otzQu3VNWlOe+c4HQvMNvii5hcMTacmrS171vp9qOYBv3tO8pHlJeX7vi69e7LvYV3+/1w2B7Z5/2pPSt3d85+XvvFy+ikIAALdLUEsp2ECJ1bSlqb+pP6XmN5oPNR+a/KJWaTf3kson78vi0W2L9y3el9LbqW9zXwVv1uWbBct2LF+3fF3tfuHO68JYT8z7M78+ZZFP0I+sGNk7sjdu3Bt6/z6TninPfOcbxM1vXLtRHLXu5pv2uWJFa8/8NfNL9PcdwPme8wPnB+LGK2sLhayoA6G5dc4TawS1lZAD2r+89O2ffftn5mN0dHTj6MbJf/7Xox89+dGTKU2cmdg+sT2l3/d8eOzDY3EVa+6WwBbqz6yXZi2btcx6XTfWmwKoFkofUwo2UIpR1M22svaSuiGgCnG6YXj58PLana98MyLKnC1zOud0luf9GP3+aD3cerD1oHW3sHX39cG9g3sTQOl8sPX42uNr48ab+8bc5+Y+V975vn4g9PNWB1FuPpgElZQrJuX/zJVLvrVp2bvL3k1pzYW1n639LKV1W/7m53/z85T+vP8vXvuL1yafh6tNDmz73j3yt0f+1usLAHAzQS2lYAOlGEUFU2XtJZUDqqgv6IPTBhoHGmt3vs5uPrP9zPbKj5Nfj7L1TI1+f7T3dxzuOGzdjT6wkeXSfXr4AWUx3jPeNd4Vd6Mtt1AoW8WYW3EwCSa/X+SKJn+++z93/+fuyQA3HyCvFvl7+qk9/W/2v+n1AwDIBLXUtVwyyAZKwV8cCzrZO7xr+Ojw0fLNe1RglU9G11owk0tjR60LZQsQ88Z1VOnd3NPMuntN9IGNm0XfVAcoysmGE9NPTI8b75Ht8zbP22zes6IOhDqYRC19D883cJ/5aM30NdPjb6LfyrvHfvvyb1/2OQIAyPSopa4N7x06OnQ0pdQQM943/uob737j3S/2lCm7hlX/afp/mp5SCj71fvzQ+9ve3zZZKqoscmDVOLvxxcYXKx9I5kD8sdS9qLsGboyee/bc7nO7Kz/O9YMbF8oVIN6wcX0lXan8eDPHZ+6fud+6e7OH1nzjyW88mdLI2EgaCRxXDz+g3uUe7GdOj1weuZxS6g5a148+tPyh5SmNLvf3XUop5Qa1zf8c25v9+vPO5weTnkj+vqP65ZLhq9LqtDql9PaOvua+5pRONfSP9Y/F/zy5lPh789/73nvfS+lb6VqgDABQVoJa6lJRGyi5lM9Ib+zGOF/9BTD3ksolocoi37x4//Kxfcf2VW6cwY0DGwY2pPTYheoOxPO6ELUhUdabL9bdqtGbeq27AFPtwoXzy84vS+mT7k/2fhJYAvfXXW+9+NaLKRWxtvv77oscTKKW5Zu2aUd6PD1eXGCbx/3jGX984o9PlK9VDABApvQxdemGDZSrn1w1H2VX1l5SC19YuGHhhsqPk2/s5pK31b4u1Nv8V4sczFl3KfO6C1jfKIebDyZBLcqBbVEtM7L3tl67WQsAUFaCWurSB93Hm443mQeuKWsvqXwiedZLs5bNCggoo3u13amojdU832U7EW7jmi9bd6v9AAfA7crPkXl9A987qRfLHl/+d8v/brJ1S7R8szZXQAIAKBtBLXUlb6BE9yiiNuReUmXT/nzHuo51lR/nesnbKl0XojZWo+a7rPNLja27VX6AA+B2De8aPjp81DzwH+XvnQ4mUcvu33T/T+7/SUrL312xYUWBFYGiKyABAFQLQS11paxBHLcn95Iqm9wj8oFjD0x7YFrlxskl4C4uu7Djwo7q+f2jNlbz/JatJ6eNa75KPsDhhgRQ6wY3DmwY2GAeuMX3UAeTqAMtLS07W3bGVWS62bnRs+1n270OAED5CGqpK2c3n9l+Zrt54MuVvZfUvPmtja2NAV+wnz23+9zu6vm9ozZWO5cvWL1gdfneVzauuZ111w0JoFblA2iXt12eeXmm+eDLOZhEPVnU9ejyR5fHjzuyYmTVyCrzDwCUj6CWumADhTtR1l6aCycWXVl0pfLjVEuPodHR0Y2jG+PWhbaB9t723vK8n6Lnl9qmhx9Qq6rtABrVycEk6smsvtmbZm8qrmdt/p4BAFAWglrqwlDX4IrBFeaB25N7aebemmXRtKWpv6k/peZpzXua91R+vKI3qob3Dh0dCijJm+czz29ZRM0v9UEPP6DW5ANn+QAa3A4Hk6gn39wys3tmd/y4H/deevrS0+YfACgPQS01LW+gKJHD3Xhv63vfe+975fu9O652Xu68XPlxiuoxlNeFXIKu0h49tnh88Xj51l0b19wNPfyAWnG6YXj58HLzwJ1xMIl6MuPCjK0ztsaPO9E4cXjisPkHAMpDUEtNs4HCvShrL6n5E21H2o5Ufpx8gCL65nK+yZtL0FXKA8cemPbAtJRmz57TN6evPO8fJf2w7gJlMDhtoHGg0TxwdxxMoh78UdNDP3joB/HjXtrwhw//8KH5BwDKQ1BLTbOBwr0oay+p+zfd/5P7f5LSgomu5q7myo93vuf8wPmBuN8vqgfxvPmtja2Nk/NZFkr6Yd0F6lm+CZlvRsLdcDCJelC21i4AAEW5zxRQi65voMwYuzJ2JW7cJ5qXvLLkFfNfKR/97e9//vufT/aQjZKDp9Y0P80v0Xy3rWtf2r40pVO9/b39vZUbJx+oWJC6UiUrwOWbu1Hvnzx/1l3rrnX3zv3u799d9+66lFp75n82/zOvA1A9hjuHVg6tTCldTvvSvsqPl3vdP9I479y8c+a/Uo4fen/b+9sqX3Ely+OcTtcqQFX6ORgAAKhdglpq0g2lpK6kgMCg9XDrwdaDKT22u7u7u9v8V8rD/TN+M+M3KV3svZguBo57Qy+p6ePTy3NyuKWlZWfLzpQatzbe13hfSpe3XZ55eWbtzu/wruGjw0dTShXum9q4tfHDxg9Tall/bf7KoqiN68dWdT/V/ZT1sVLmfH9uz9yelC6m/Wl/4Lh5vRkdHd04unFyPQIo2sCRUwdOHUgpBT3z5173rT3z189fb/4rZeLMxPaJ7SmdSv1j/WNx436w9fja42tTWrC+67MuB5MAAIAvofQxNSmXkooyt+WRoUeGzHul3RAcfthYQE+asvaS6tjZuatzV+XHuR70VcjgxoENAxsq/3s8um3xvsX7yvc+ub5xHSRvXFNZ+eBEUevu8N6ho0NHvQ5A8Ua2nN5/en/cjcusbL3ui1JUJZSbDyYBAADcTFBLTbGBUg5RweHNytpLqm1D29K2gI2rs5vPbD+zfer/3LzxVakbwTebP9F2pO1Ied4fF5dd2HFhh3W33hV1AOFUw7WbTXr4AUU7N3q2/Wx73HgLJrqau5rL1+u+KEUfCHUwCQAAuBVBLTVl6PXBvYN748azgVKMqODwZjmIunDh/LLzy8oz39M/enDRg4smS3xXSqVuFERtfJV1PRjqGlwxuCJuvPw+tO7GmrNlTueczuLGP91wrYcfQLTc435kxciqkVVx4859Y+5zc58z/9EcTILb5/0KABBDUEtNyBsoF1+92Hcx8IaVDZRi5OBw1kuzls0qIDD93d+/u+7ddeWb96gS31MdrEaVQi/belDYxrVS84Wuu5U+sHEruYcfQLTrPe6DPHDsgWkPTEtpVt/sTbM3mf9oDibB7ft43ccTH0/EjzvtmWk/mPYD8w8AlIeglppgA6Wc2p/vWNdRQGBa1l5SrT3z18xfM/n+r5SpClajSqHnEnllWw/O95wfOD8Qv+7m9yEFrbv9HYc7Dlt3gfKI6nGfzZvf2tjaaN6L4mAS3L5/PfrRkx89GT/uQ2u+8e433jX/AEB5CGqpCTZQyikqOLyVsvaS6ly+YPWC1ZX783Owmnuf3q2oXnJF9UwuWvRGonW3OuQDCdZdoN5F97jPFk4surLoivkvWlEVPBxMopacvXxm7pm58eM+9KOHJh6aMP8AQHkIaqlqRW2gtK1rX9q+1PxXi6ICnLL2klr4wsINCwMORpx79tzuc7vv/P+XX4+okrxF9UwuynjPeNd4V/y6q9R8dan0gY2vW3dz6W2ASok+GJIrdDRtaepv6jf/RSv6QOjJLR+88MELXgeqU34OG7s6tn5sffz4D65u2NGww+sAAJSHoJaqVtQGSktLy86Wnea/WhR986BsvaRySbjmac17mvdUbpy7LYF84cL5ZecDehfnknh5PsriZMOJ6Semx42n1Hx1ahto723vLfDv/+CWB0B55ANfUT3us0e2z9s8b7P5rzZFHQjNBw4dTKIaFfUclr8XONACAJSNoJaqlDdQ8s2aKDZQqlP+opaD9Ghl7SX16LHF44vHK/fn320J5KiSx0WVxCt63Y3euC7q5ia3t+5W+sDGrUS3PADKIx/4qnSP+5tFVSzhDl+Xgg+EOphENX4fOH7o/W3vb4sff+b4zP0z93sdAIDyEdRSlaJuzN2s6BtEfLVHty3et3hf/Lhl7SU1e/acvjl9lS8Jd7slkKNKHuffN5fEK9u6G71xbd2tbh1XOy93Xo4fN6+799rLGuBmH3QfbzreFDdePvBStgodtcLBJJj0TvqXQ/9yKP77QFa2g7IAAJmglqpU1AaKEjvVbc6WOZ1zOosbP7oUd9Hu33T/T+7/SeVLwt3uDc6oAxxlveE59Prg3sG9cePp1Vcb5k+0HWk7UuD7smtwxeAKrwNw74rquVjUgRdq43VyMIlqkN9/0RXNbpYPCgMAlI2glqoy3jPeNd5lA4Uvl28i5N6h0fIX17L1kmpb1760fWnl/vzbLYEcVfK4bKUJ8/v54qsX+y4Gbox07Ozc1bnLulbt8oGNBRNdzV3N8ePr4QdMlZM/PbnrZAF/7xR90JDb42ASZZT3Xw4/+evXfv1acT9Hfs7Mz50AAGUjqKWqDHcOrRxaGT+uDZTa0t7fcbjjcIHv05L1kmppadnZsrPyPYI/evmj0x+d/uJ/H1XyeNZLs5bNWla+0oRFbVy3bWhb2rY0USPmvjH3ubnPWXeB2nV285ntZ7bHjVfW54palQOiog6EOphEpBzQ/tPo//zsf35WXKnj698LKnwwGACg2glqqSoDR04dOHUgbjw9o2rTrL7Zm2Zvqnzv1Fspay+pSvcIvtUGalTJ4/bnO9Z1rCvf6xq9cW3dre11t9IHNqy7wFTLFTtyidkoZX2uqHUOhFLPRkdHN45urJ6ANh9oyQeDAQDKSlBLVcgbKNFfFB49tnh88bj5r1VF9RItay+pSpeEy/OaT3hnlS55nAP/svVEKmrjWqn52vbI9nmb520ubt0d2XJ6/+n9Xgfg9hVVUlavxdpU9IHQ44fe3/b+Nq8DUyNXJvrt/ndeeuellHp7D/Ye7C0+oM3+uP9Pmv6kyesEACCopSrYQOFutA2097b3lu99W5SoknDnF5/bcm7L5D9/2PThmg/XVG68efNbG1sby9cT6dyz53af2x0/btE94Lg3RfdwHnp9cO/gXq8D8PWiWifcLD8n6bVY24o6EJoDNAeTuBu5dHYOZved3vvm3jdTev/ysX3H9lXPz+kmLQDAfySopSq+SNhA4W40bWnqb+qfLKUaray9pCpdEu7s5TNzz8yNu2m/cGLRlUVXyvP65Y3rUw39Y/1j1l3uTC5ZXdS6e/HVi30X+/TwA77e6Ybh5cPL6+85iRiFHwh1MImvkCsQndrT/2b/mykdfOPAoQOHUtrb8w9P/8PTk8FstdyczfJN9f9r2vIfLv+h1xEAILvPFFCk8z3nB84PxI87t+WRoUeGUkopdadur0Oty6VUx9JYGitg/NxL6rHUvai7BD03r/eqnN34YuOLU186d+zq2Pqx9Smde/Zc87nmyv0eOWhq2tL0VNNT5fm83LBxvTcFbgBad+tLbh3w66630lsFjH/ypyd3ndyV0hNpyatLXvV6cHs+7r309KWnU0or08a00XxUm4buBzc/uHnqeph/sPX42uNrU0rb0swUUOI/BxD5OYnadv1A6BvNh5oPTT6fRrn5YNJUfS6q1Sc7Pnn+k+cne6iWxafPXF18dXFKl35wqeFSwxf/90v7//D4Hx5P6eqbV3909UeT74s04/q/sjltTildrY3fd/FTj219bGtK01+t7/ez5xbPLfWsrOs1/9Ef7f2jhj9qcBAfppKglkIVtYHS+ur8NfPXmP96kUupvt3Ql4qoZD24cWDDwIaUHrvQvb57fXnmPfeqrFQprUrf+Cxrr9TBaQONA40pfEPnhlLza5L1t+bl1zP/vRp9Y2PgyKkDpw6k9MQaQS237+3Ut7lvc0qp11xUoyd2LXlyyZP3fvAt3zSL7sGeWylQXxxMipGD8N7eg+lgmd5gz6fe1JvSLU8br7jpP2tULnX82KVyfV/23OK5xXpNvVq5btXKVStTakktqcV0wJRQ+phC2EBhKuUTXAsmupq7muPHz+/jsvWSKrpX5b0qW6/UvO5G3wjJn0snLetz3S3q71U9/IBbOdlwYvqJ6fHjzn1j7nNznzP/9eaGg2aFyAeToBblA31/8cpTs5+abT4AAG5FUEshbKBQj69v2XpJ5RI/+YR0rShrcGjdpRLa1rUvbV9q3QWqx5nTI5dHAitmNG5t/LDxQyWP61XRB0IdTKIW5YD2Oy1/fd9f3+fAJgDA1xHUEurTHZ++/OnLNlCojOu9Uz9/vaPd3EuqLNqf71jXsa52ft6ig6WiRK+7evWVQ0tLy86WndZdoHg5yIouxZ5bQVDfHAiF23/+zwFt7vUMAMBXE9QS6sKF88vOL7OBQn2/3rmXVFm09lzr+Zy/mFerHCTlYKksitq4Vmq+XDp2du7qLHDde2/re99773teByizooKstoH23nb9A+tetRwIza0soJoIaAEA7o2gllA2UIhQdO/UsvaSqvZg7tFti/ct3le+1+Xc6Nn2s+0FfA4nFl1ZdMV6VBZtG9qWthV4Uz3fGM+VO4DyyDfqc5AVJQd2AolyKfxAaEGtLODL5BY4a+eve2bdM9ZDAIC7JaglhA0UIuXeqc3Tmvc074kfv6y9pKo9mJuzZU7nnM7yrbsjK0ZWjayy7hKz7hbVszqvu7lyB1Aew7uGjw4fjR+3rAfAyq7oA6EOJlGkfHP2W2nZ9mXbU/rLS9/+2bd/pgctAMC9EtQSoqhSsEWXYqRYjx5bPL54vLjxy9ZLKgdzRQXkt9J6uPVg68HJIKksitq4Vmq+3IruWf1B9/Gm401eByiTwY0DGwYKCM7KdgCMaxxMoowWTHQ1dzWn9F/feObAMwdSWrC+65muZ8wLAMBUEdQS4uzmM9vPbI8ft+hSjBRr9uw5fXP6iuudmm+Q55uNZdFxtfNy5+Xq+Xna+zsOdxwu3/u/qI1rpebLreie1WNXx9aPrdfDD8rg4rILOy7sSOnytsszL8+MGzcfSCvbATBuer50MIk6lJ/fcjC7bsvf/Pxvfp7StzYte3fZu9Y9AIBKEdRSUTZQKFIuwVR079SibpQXZf5E25G2I8X/HLkE76y+2ZtmbyrP/I+Ojm4c3VjcuqvkMSlVwbqrhx/UvXPPntt9bnf8uEVXbKE6FH0g1MEkpvL5/c/7/+K1v3htstesYBYAIJaglooqagOl2m70Uay2de1L2wu8WT1w5NSBUwfK00sqB+T5JHZRylqCd3jv0NGhAkoeW3e5UdE9q/Xwg/qVP9enGvrH+sfix88BHeVWNQdCHUziK+SDq/l7WQ5k/++J/7buv61LadWzq59a/dRkRRS9ZgEAiiGopSKK3kCplht9VIeWlpadLTsnv6hGK2svqblvzH1u7nPFjb/whYUbFm4oz3zndTcHVNH06uNG+Wa1dReYakV9rnPPe0EGNyr6QKiDSeWSb3DnHsl5XXqieckrS15J6S9f/6vv/9X3J0sWr7mw9rO1n03ekBXIAgBUp/tMAZXw6barz119LqUndi1ZvGRx3LgNRxoaGxpTur/n/jX3r/E68B/92dwnX3vytZQuNV9quNRgPiotlxx+4uCShiWB8z1tbFrTtKbylerK6+7iXY8tfmyx+aY6LH93xYYVG1L616MfPfnRk/X/++aN0rDnnu4Hlz64NKX0kfmi9j28dMZvZvwmpZTS+rS++t4/D/fM+OmMn6aUUtqZdnq9uCYfCH2iecmeJXsK+AGe+vw5cMPVpVeXpnT/pvvT/VP4eXziqHU6Yv/iwZcaftnwyy/9e37zg5u/5Dn71S/8q92pO6W0ypx6bqFan1sq/XNYrwn9+6vGv4dCNfo//r/PmQoAAAAAAACAGEofAwAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAEE9QCAAAAAAAABBPUAgAAAAAAAAQT1AIAAAAAAAAE+/8HAOYwBTYonDtmAAAAAElFTkSuQmCC";
  AnimationController _controller;
  bool _appBarVisible;
  bool connection;
  List<Uint8List> Contentimage = [];
  TextEditingController rateController;
  List review = [];

  void getReview() async {
    final response = await http.post(
      url + "getRating3.php",
      body: {
        "storybookID": widget.storyID,
        "language": widget.pageLanguage[languageRate].languageCode,
        "children_id": widget.childrenID
      },
    );

    var rating = json.decode(response.body);

    if (rating.length != 0) {
      review = rating;
      print(review[0]);
      rateController.text = review[0]['comments'];
    } else {
      review = [];
      rateController.text = "";
    }
  }

  void checkconnection() async {
    //function used to check connection
    try {
      final result = await InternetAddress.lookup('google.com');
      if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {
        connection = true;
        getReview();
      }
    } on SocketException catch (_) {
      connection = false;
    }
  }

  void createValue() {
    //create a list of languages options to let user select.
    languageList = [];

    for (int i = 0; i < widget.pageLanguage.length; i++) {
      languageList.add(widget.pageLanguage[i].languageDesc);
    }

    for (int i = 0; i < languageList.length; i++) {
      //Starting of create options, the first languages must be true. Else user do not have specific language to read.
      if (i == 0) {
        pickLanguage.add(true);
      }
      //and the rest are false.
      else {
        pickLanguage.add(false);
      }
    }
  }

  void changeLanguage() {
    //change the page content language and image after user selected other language.
    Contentimage.clear();
    pageList.clear();
    for (int i = 0; i < languageList.length; i++) {
      if (pickLanguage[i] == true) {
        languageRate = i;
        for (int j = 0; j < widget.pageText.length; j++) {
          if (widget.pageText[j].languageDesc == languageList[i]) {
            pageList.add(widget.pageText[j]);
            //if the image byte is same as empty image.
            if (widget.pageText[j].story_image == emptyImage) {
              Contentimage.add(null);
            } else {
              Uint8List bytes = base64Decode(widget.pageText[j].story_image);
              Contentimage.add(bytes);
            }
          }
        }
      }
    }
  }

  @override
  void initState() {
    OngoingDuration = widget.onGoing.isEmpty ? 0 : widget.onGoing[0].duration;
    saveNumber = widget.onGoing.isEmpty ? 0 : widget.onGoing[0].page_no;
    // TODO: implement initState
    //this page is available for potrait or landscape.
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft
    ]);
    checkconnection();
    createValue();
    changeLanguage();

    _appBarVisible = true;
    rateController = TextEditingController();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 700),
      value: 1.0,
      vsync: this,
    );
    //loadImage();
    super.initState();
  }

  void dispose() {
    _controller.dispose();
    //reset the screen orientation to potrait.
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    super.dispose();
  }

  void _toggleAppBarVisibility() {
    //to show or hide appbar
    _appBarVisible = !_appBarVisible;
    _appBarVisible ? _controller.forward() : _controller.reverse();
  }

  void loadImage() {
    //load all image into a list, so the app do not need to keep loading the image
    for (int i = 0; i < widget.pageImage.length; i++) {
      if (widget.pageText[i].story_image == emptyImage) {
        Contentimage.add(null);
      } else {
        Uint8List bytes = base64Decode(widget.pageText[i].story_image);
        Contentimage.add(bytes);
      }
    }
  }

  Future<bool> _onWillPop() async {
    var difference = DateTime.now().difference(start_time).inMinutes;
    if (OngoingDuration != null) {
      //if previous reading duration has data, then add current duration with previous and store.
      difference += OngoingDuration;
    }
    var onGoing =
        OnGoing(widget.childrenID, widget.storyID, saveNumber, difference);
    //update ongoing reading details in local database
    db.updateOngoing(onGoing);
    Navigator.pop(context);

    return false;
  }

  @override
  Widget build(BuildContext context) {
    //to show or hide app bar and page number
    Animation<Offset> offsetAnimation =
        new Tween<Offset>(begin: Offset(0, -1.0), end: Offset(0.0, 0))
            .animate(_controller);
    Animation<Offset> numberAnimation =
        new Tween<Offset>(begin: Offset(0, 1.0), end: Offset(0, 0.2))
            .animate(_controller);
    Animation<Offset> lanscapenumberAnimation =
        new Tween<Offset>(begin: Offset(0, 1), end: Offset(0, 0.3))
            .animate(_controller);
    currentPage = widget.onGoing.isEmpty ? 0 : widget.onGoing[0].page_no;
    contentController =
        new PageController(initialPage: currentPage, keepPage: false);

    return new WillPopScope(
        onWillPop: _onWillPop,
        child: Scaffold(
          key: _scaffoldKey,
          body: Stack(
            children: <Widget>[
              GestureDetector(
                onTap: () => setState(() {
                  _toggleAppBarVisibility();
                }),
                child: Container(
                  width: MediaQuery.of(context).size.width,
                  height: MediaQuery.of(context).size.height >= 650.0
                      ? MediaQuery.of(context).size.height
                      : 1000.0,
                  decoration: new BoxDecoration(
                    gradient: new LinearGradient(
                        colors: [
                          Theme.Colors.loginGradientStart,
                          Theme.Colors.loginGradientEnd
                        ],
                        begin: const FractionalOffset(0.0, 0.0),
                        end: const FractionalOffset(1.0, 1.0),
                        stops: [0.0, 1.0],
                        tileMode: TileMode.clamp),
                  ),
                  child: SingleChildScrollView(
                    child: Container(
                      width: MediaQuery.of(context).size.width,
                      height: MediaQuery.of(context).size.height,
                      padding: EdgeInsets.only(top: 40),
                      child: _buildPage(context),
                    ),
                  ),
                ),
              ),
              SlideTransition(
                position: offsetAnimation,
                child: Container(
                  height: 75,
                  child: AppBar(
                      centerTitle: true,
                      backgroundColor: Colors.lightBlue,
                      elevation: 0,
                      title: Text(widget.storyTitle),
                      leading: saveNumber + 1 ==
                              (widget.pageText.length /
                                  widget.pageLanguage.length)
                          ? IconButton(
                              icon: Icon(Icons.done),
                              onPressed: () {
                                if (connection == true) {
                                  //getReview();

                                  showDialog(
                                      context: context,
                                      builder: (_) => Center(
                                              // Aligns the container to center
                                              child: SingleChildScrollView(
                                            // A simplified version of dialog.
                                            child: Container(
                                                child: AlertDialog(
                                              title: review.length != 0
                                                  ? Text(
                                                      'You have rated this story before!')
                                                  : Text('Rate this story!'),
                                              content: Form(
                                                  child: Column(
                                                children: <Widget>[
                                                  Container(
                                                    width: 300,
                                                    alignment: Alignment.center,
                                                    child: FlutterRatingBar(
                                                      initialRating:
                                                          review.length != 0
                                                              ? double.parse(
                                                                  review[0]
                                                                      ['value'])
                                                              : 0,
                                                      fillColor: Colors.amber,
                                                      borderColor: Colors.amber
                                                          .withAlpha(50),
                                                      allowHalfRating: true,
                                                      onRatingUpdate: (rating) {
                                                        rate = rating;
                                                      },
                                                    ),
                                                  ),
                                                  SizedBox(height: 15),
                                                  Container(
                                                    decoration: BoxDecoration(
                                                      border: Border.all(
                                                        color: Colors.grey,
                                                        width: 1,
                                                      ),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              5),
                                                    ),
                                                    child: Padding(
                                                      padding:
                                                          EdgeInsets.all(10.0),
                                                      child: TextField(
                                                        controller:
                                                            rateController,
                                                        maxLines: 8,
                                                        maxLength: 150,
                                                        decoration: InputDecoration
                                                            .collapsed(
                                                                hintText:
                                                                    "Describe your experience (Optional)"),
                                                      ),
                                                    ),
                                                  ),
                                                  Container(
                                                    child: ButtonBar(
                                                      children: <Widget>[
                                                        FlatButton(
                                                          onPressed: () async {
                                                            saveHistory();
                                                            Navigator.of(context).pushAndRemoveUntil(
                                                                MaterialPageRoute(
                                                                    builder: (context) => LoadBook(
                                                                        childData:
                                                                            widget
                                                                                .childData,
                                                                        childrenID:
                                                                            widget
                                                                                .childrenID)),
                                                                (Route<dynamic>
                                                                        route) =>
                                                                    false);
                                                          },
                                                          child: Text(
                                                            review.length != 0
                                                                ? 'Cancel'
                                                                : 'Next time',
                                                            style: TextStyle(
                                                                color: Colors
                                                                    .black),
                                                          ),
                                                        ),
                                                        FlatButton(
                                                            color: Colors.amber,
                                                            onPressed:
                                                                () async {
                                                              saveHistory();
                                                              print(review
                                                                  .length);
                                                              if (review
                                                                      .length ==
                                                                  0)
                                                                rating(
                                                                    rateController
                                                                        .text,
                                                                    rate,
                                                                    widget
                                                                        .pageLanguage[
                                                                            languageRate]
                                                                        .languageCode);
                                                              else
                                                                updateRating(
                                                                    rateController
                                                                        .text,
                                                                    rate,
                                                                    review[0][
                                                                        'rating_id']);

                                                              showDialog(
                                                                context:
                                                                    context,
                                                                barrierDismissible:
                                                                    false,
                                                                builder:
                                                                    (BuildContext
                                                                        context) {
                                                                  return Dialog(
                                                                      child:
                                                                          Container(
                                                                    height: 200,
                                                                    width: 50,
                                                                    child:
                                                                        Center(
                                                                      child: SpinKitThreeBounce(
                                                                          color:
                                                                              Colors.blue),
                                                                    ),
                                                                  ));
                                                                },
                                                              );
                                                              new Future
                                                                      .delayed(
                                                                  new Duration(
                                                                      seconds:
                                                                          2),
                                                                  () {
                                                                Navigator.of(context).pushAndRemoveUntil(
                                                                    MaterialPageRoute(
                                                                        builder: (context) => LoadBook(
                                                                            childData: widget
                                                                                .childData,
                                                                            childrenID: widget
                                                                                .childrenID)),
                                                                    (Route<dynamic>
                                                                            route) =>
                                                                        false);
                                                              });
                                                            },
                                                            child: Text(
                                                              review.length != 0
                                                                  ? 'Change Rating'
                                                                  : 'Rate',
                                                              style: TextStyle(
                                                                  color: Colors
                                                                      .white),
                                                            ))
                                                      ],
                                                    ),
                                                  )
                                                ],
                                              )),
                                            )),
                                          )));
                                } else {
                                  saveHistory();
                                  Navigator.of(context).pushAndRemoveUntil(
                                      MaterialPageRoute(
                                          builder: (context) => LoadBook(
                                              childData: widget.childData,
                                              childrenID: widget.childrenID)),
                                      (Route<dynamic> route) => false);
                                }
                              })
                          : IconButton(
                              icon: Icon(Icons.arrow_back),
                              onPressed: () {
                                var difference = DateTime.now()
                                    .difference(start_time)
                                    .inMinutes;
                                if (OngoingDuration != null) {
                                  //if previous reading duration has data, then add current duration with previous and store.
                                  difference += OngoingDuration;
                                }
                                var onGoing = OnGoing(widget.childrenID,
                                    widget.storyID, saveNumber, difference);
                                //update ongoing reading details in local database
                                db.updateOngoing(onGoing);
                                Navigator.pop(context);
                              })),
                ),
              ),
              Align(
                alignment: Alignment.bottomCenter,
                child: SlideTransition(
                  position:
                      MediaQuery.of(context).orientation == Orientation.portrait
                          ? numberAnimation
                          : lanscapenumberAnimation,
                  child: Padding(
                    padding: EdgeInsets.all(50.0),
                    child: Container(
                      color: Colors.lightBlue,
                      padding: EdgeInsets.all(5),
                      child: Text(
                        "Page: ${saveNumber + 1} of ${pageList.length}",
                        style: TextStyle(
                            fontFamily: 'WorkSansSemiBold',
                            color: Colors.white),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ));
  }

  Widget _buildPage(BuildContext context) {
    return PageView.builder(
        onPageChanged: onPageChange,
        controller: contentController,
        itemCount: pageList == null ? 0 : pageList.length,
        itemBuilder: (context, i) {
          languageController = new PageController(initialPage: initialLanguage);
          return Container(
              child: MediaQuery.of(context).orientation == Orientation.portrait
                  ? Column(
                      children: <Widget>[
                        Stack(
                          children: <Widget>[
                            Container(
                              alignment: Alignment.topCenter,
                              height: Contentimage[i] == null
                                  ? 40
                                  : MediaQuery.of(context).size.height *
                                      0.9 /
                                      2,
                              child: Contentimage[i] == null
                                  ? Container()
                                  : FadeInImage(
                                      fit: BoxFit.cover,
                                      image: MemoryImage(Contentimage[i]),
                                      placeholder:
                                          MemoryImage(kTransparentImage),
                                    ),
                            ),
                          ],
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Container(
                              child: currentLanguage == 0
                                  ? Text("              ")
                                  : IconButton(
                                      onPressed: () {
                                        int prev = currentLanguage - 1;
                                        languageController.animateToPage(prev,
                                            duration:
                                                Duration(milliseconds: 1000),
                                            curve: Curves.ease);
                                      },
                                      icon: Icon(Icons.arrow_left),
                                    ),
                            ),
                            Card(
                              elevation: 5,
                              child: Container(
                                  height: 30,
                                  width: 200,
                                  alignment: Alignment.topCenter,
                                  child: PageView.builder(
                                      controller: languageController,
                                      onPageChanged: onLanguageChange,
                                      //shrinkWrap: true,
                                      scrollDirection: Axis.horizontal,
                                      itemCount: languageList == null
                                          ? 0
                                          : languageList.length,
                                      itemBuilder: (context, i) {
                                        return Tooltip(
                                          message: "Swipe to switch language",
                                          child: Container(
                                            padding: EdgeInsets.all(5),
                                            width: 150,
                                            alignment: Alignment.center,
                                            child: Text(
                                              languageList[i],
                                              style: TextStyle(
                                                  fontFamily:
                                                      'WorkSansSemiBold'),
                                            ),
                                          ),
                                        );
                                      })),
                            ),
                            Container(
                              child: currentLanguage == languageList.length - 1
                                  ? Text("              ")
                                  : IconButton(
                                      onPressed: () {
                                        int next = currentLanguage + 1;
                                        languageController.animateToPage(next,
                                            duration:
                                                Duration(milliseconds: 1000),
                                            curve: Curves.ease);
                                      },
                                      icon: Icon(Icons.arrow_right),
                                    ),
                            ),
                          ],
                        ),
                        Container(
                          height: Contentimage[i] == null
                              ? MediaQuery.of(context).size.height * 2 / 3
                              : MediaQuery.of(context).size.height * 1 / 4,
                          padding: EdgeInsets.only(top: 0, left: 30, right: 30),
                          alignment: Alignment.center,
                          child: Text(
                            pageList[i].story_content,
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontSize: 20,
                              fontFamily: 'WorkSansMedium',
                            ),
                          ),
                        ),
                        Container(
                          child: FloatingActionButton(
                            onPressed: () async {
                              flutterTts.setLanguage(pageList[i].speech_id);
                              flutterTts.setSpeechRate(0.6);
                              flutterTts.speak(pageList[i].story_content);
                            },
                            child: Icon(Icons.headset),
                          ),
                        )
                      ],
                    )
                  : Row(
                      children: <Widget>[
                        Container(
                          alignment: Alignment.center,
                          height: MediaQuery.of(context).size.height,
                          width: Contentimage[i] == null
                              ? 0
                              : MediaQuery.of(context).size.width / 2,
                          child: Contentimage[i] == null
                              ? Container()
                              : FadeInImage(
                                  fit: BoxFit.cover,
                                  image: MemoryImage(Contentimage[i]),
                                  placeholder: MemoryImage(kTransparentImage),
                                ),
                        ),
                        Container(
                          width: Contentimage[i] == null
                              ? MediaQuery.of(context).size.width
                              : MediaQuery.of(context).size.width / 2,
                          height: MediaQuery.of(context).size.height,
                          child: Column(
                            children: <Widget>[
                              Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: <Widget>[
                                  Container(
                                    child: currentLanguage == 0
                                        ? Text("              ")
                                        : IconButton(
                                            onPressed: () {
                                              int prev = currentLanguage - 1;
                                              languageController.animateToPage(
                                                  prev,
                                                  duration: Duration(
                                                      milliseconds: 1000),
                                                  curve: Curves.ease);
                                            },
                                            icon: Icon(Icons.arrow_left),
                                          ),
                                  ),
                                  Card(
                                    elevation: 5,
                                    child: Container(
                                        height: 30,
                                        width: 180,
                                        alignment: Alignment.topCenter,
                                        child: PageView.builder(
                                            controller: languageController,
                                            onPageChanged: onLanguageChange,
                                            //shrinkWrap: true,
                                            scrollDirection: Axis.horizontal,
                                            itemCount: languageList == null
                                                ? 0
                                                : languageList.length,
                                            itemBuilder: (context, i) {
                                              return Tooltip(
                                                message:
                                                    "Swipe to switch language",
                                                child: Container(
                                                  padding: EdgeInsets.all(5),
                                                  width: 150,
                                                  alignment: Alignment.center,
                                                  child: Text(
                                                    languageList[i],
                                                    style: TextStyle(
                                                        fontFamily:
                                                            'WorkSansSemiBold'),
                                                  ),
                                                ),
                                              );
                                            })),
                                  ),
                                  Container(
                                    child: currentLanguage ==
                                            languageList.length - 1
                                        ? Text("              ")
                                        : IconButton(
                                            onPressed: () {
                                              int next = currentLanguage + 1;
                                              languageController.animateToPage(
                                                  next,
                                                  duration: Duration(
                                                      milliseconds: 1000),
                                                  curve: Curves.ease);
                                            },
                                            icon: Icon(Icons.arrow_right),
                                          ),
                                  ),
                                ],
                              ),
                              Container(
                                height:
                                    MediaQuery.of(context).size.height * 0.65,
                                padding: EdgeInsets.only(
                                    top: 0, left: 30, right: 30),
                                alignment: Alignment.center,
                                child: Text(
                                  pageList[i].story_content,
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    fontSize: 20,
                                    fontFamily: 'WorkSansMedium',
                                  ),
                                ),
                              ),
                              Container(
                                alignment: Alignment.bottomCenter,
                                child: FloatingActionButton(
                                  onPressed: () async {
                                    flutterTts
                                        .setLanguage(pageList[i].speech_id);
                                    flutterTts.setSpeechRate(0.6);
                                    flutterTts.speak(pageList[i].story_content);
                                  },
                                  child: Icon(Icons.headset),
                                ),
                              )
                            ],
                          ),
                        ),
                      ],
                    ));
        });
  }

  void saveHistory() {
    // save history after user has finished reading
    DateFormat dateFormat = DateFormat("yyyy-MM-dd");

    checkconnection();

    var difference = DateTime.now().difference(start_time).inMinutes;
    if (OngoingDuration != null) {
      difference += OngoingDuration;
    }

    if (connection == true) {
      http.post(url + "saveHistory.php", body: {
        'storybookID': widget.storyID,
        'children_id': widget.childrenID,
        'read_date': dateFormat.format(DateTime.now()),
        'duration': difference.toString(),
      });

      http.post(url + "addLogChildren(Reader).php", body: {
        'children_id': widget.childrenID,
        'title': 'Read Storybook',
        'description': widget.childrenID +
            ' has read a storybook: ' +
            widget.storyID +
            ' for ' +
            difference.toString() +
            ' minutes',
      });
    } else
      var db = DBHelper();
    widget.stats[0].num_read += 1;
    db.updateStats(widget.stats[0]);
    var history = History(widget.childrenID, widget.storyTitle, difference,
        dateFormat.format(DateTime.now()));
    db.saveHistory(history);
    var onGoing = OnGoing(widget.childrenID, widget.storyID, 0, 0);
    db.updateOngoing(onGoing);
  }

  void rating(String rateText, double rating, String languageCode) {
    //user rate the story book from 0 to 5
    //post data to php file

    widget.stats[0].num_rate += 1;
    db.updateStats(widget.stats[0]);

    DateFormat dateFormat = DateFormat("yyyy-MM-dd");

    http.post(url + "rating(Reader).php", body: {
      'storybookID': widget.storyID,
      'children_id': widget.childrenID,
      'rating': rating.toString(),
      'languageCode': languageCode,
      'comments': rateText,
      'date': dateFormat.format(DateTime.now()),
    });

    http.post(url + "addLogChildren(Reader).php", body: {
      'children_id': widget.childrenID,
      'title': 'Rate Storybook',
      'description':
          widget.childrenID + ' has rated a storybook: ' + widget.storyID,
    });
  }

  void updateRating(String rateText, double rating, String rateID) {
    //post data to php file
    http.post(url + "updateRating(Reader).php", body: {
      'rateID': rateID,
      'rating': rating.toString(),
      'comments': rateText,
    });

    http.post(url + "addLogChildren(Reader).php", body: {
      'children_id': widget.childrenID,
      'title': 'Change Rating On Storybook',
      'description':
          widget.childrenID + ' has changed the rating on storybook: ' + widget.storyID,
    });
  }

  onLanguageChange(int pageNo) {
    //to notify user has select other langauges
    currentLanguage = pageNo;
    setState(() {
      pickLanguage[pageNo] = true;
      initialLanguage = pageNo;
      for (int i = 0; i < pickLanguage.length; i++) {
        if (i != pageNo) pickLanguage[i] = false;
      }
    });

    changeLanguage();

    getReview();
  }

  onPageChange(int pageNo) {
    //to notify the page number is changing
    currentPage = pageNo;
    onvaluechanged(currentPage);
  }

  void onvaluechanged(int i) {
    //to save last page read by user.
    setState(() {
      saveNumber = i;
    });
  }
}
